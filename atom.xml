<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A JOURNEY OF A SOFTWARE CRAFTMAN</title>
  
  <subtitle>Coding and Fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-15T03:35:45.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xavier Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>format_json</title>
    <link href="http://yoursite.com/2017/10/15/format-json/"/>
    <id>http://yoursite.com/2017/10/15/format-json/</id>
    <published>2017-10-15T03:35:45.000Z</published>
    <updated>2017-10-15T03:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Put the following snip to your vimrc, whenever you open a JSON file, you can format it with hotkey fj in normal mode.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FmtJSON</span>(<span class="params">...</span>) </span></div><div class="line"><span class="function">  <span class="title">let</span> <span class="title">code</span>="\"</span></div><div class="line"><span class="function">        \ <span class="title">var</span> <span class="title">i</span> = <span class="title">process</span>.<span class="title">stdin</span>, <span class="title">d</span> = '';</span></div><div class="line"><span class="function">        \ <span class="title">i</span>.<span class="title">resume</span>(<span class="params"></span>);</span></div><div class="line"><span class="function">        \ <span class="title">i</span>.<span class="title">setEncoding</span>(<span class="params"><span class="string">'utf8'</span></span>);</span></div><div class="line"><span class="function">        \ <span class="title">i</span>.<span class="title">on</span>(<span class="params"><span class="string">'data'</span>, function(data</span>) </span>&#123; d += data; &#125;);</div><div class="line">        \ i.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        \     <span class="keyword">try</span> &#123;</div><div class="line">        \       <span class="built_in">JSON</span>.parse(d) </div><div class="line">        \     &#125; <span class="keyword">catch</span>(e) &#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(d); &#125;</div><div class="line">        \     <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(d), <span class="literal">null</span>, </div><div class="line">        \ <span class="string">" . (a:0 ? a:1 ? a:1 : 2 : 2) . "</span>));</div><div class="line">        \ &#125;);\<span class="string">""</span></div><div class="line">  execute <span class="string">"%! node -e "</span> . code </div><div class="line">endfunction</div><div class="line"></div><div class="line">nmap fj :&lt;C-U&gt;call FmtJSON(v:count)&lt;CR&gt;</div></pre></td></tr></table></figure><p>The main part of function FmtJSON is copied from somewhere, but if the JSON file is malformed you probably override the original file unexpectedly, so I added try-catch in the end event handler.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Put the following snip to your vimrc, whenever you open a JSON file, you can format it with hotkey fj in normal mode.&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Using Message Queues with Microservices</title>
    <link href="http://yoursite.com/2016/08/06/mq-with-microservice/"/>
    <id>http://yoursite.com/2016/08/06/mq-with-microservice/</id>
    <published>2016-08-06T12:41:10.000Z</published>
    <updated>2016-08-06T15:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/microservices-nsq-rabbitmq.png" alt=""></p><h2 id="We-build-Microservices"><a href="#We-build-Microservices" class="headerlink" title="We build Microservices"></a>We build Microservices</h2><p>So, what’s the big deal with microservices? Well, there are numerous benefits to building these little guys compared to the <a href="https://en.wikipedia.org/wiki/Monolithic_system" target="_blank" rel="external">traditional monolithic architecture</a> of days long gone:</p><ol><li>Small codebase</li><li>Reusable</li><li>Loosly coupled</li><li>Easy to enhance and extend</li><li>Easy to deply and scale</li><li>Plug-and-play format</li></ol><a id="more"></a>  <p>I won’t waste your time telling you why you should be using microservices, there are plenty of folks advocating this approach already. You can refer to <a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="external">MartinFowler.com</a> and <a href="https://blog.risingstack.com/why-you-should-start-using-microservices/" target="_blank" rel="external">these guys</a> for more information about what microservices are and the advantages they have.<br>Despite their extreme usefulness, microservices are certainly not some silve bullet for all of you backend problems. One of their biggest downfalls is the complexity of interaction between the servcies you build. </p><p>We use <a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a> and <a href="https://loopback.io/" target="_blank" rel="external">loopback</a> to build REST API services, which means the we mainly rely HTTP(S) protocal, As you start to build the backend, it’s not too difficult to keep a clean and graceful structure at beginning, because you can definately differentiate the upstream and downstream services clealy and neatly. However as the requirements increase in volume and complexity and the system evolves, you may find you messed something up and the API callings are now looking like your mother’s spaghetti!</p><p><img src="/images/microservices-nsq-rabbitmq-1.png" alt=""></p><h2 id="Why-we-use-message-queues"><a href="#Why-we-use-message-queues" class="headerlink" title="Why we use message queues"></a>Why we use message queues</h2><p>The cross dependency means the system is tightly coupled, so no single service can go it alone without cooperation from other services. We use the message queue as a supplement for decoupling and keeping the the architecture flexible.<br>Acturally, in addition to the decoupling, we expect the following features from message queue:</p><ol><li>A mechanism with retry(and delay retry upon failure)</li><li>Pub-sub(publish-subscriber) pattern</li></ol><h3 id="Candidates"><a href="#Candidates" class="headerlink" title="Candidates"></a>Candidates</h3><p>We have 2 candidates for serving as our message queue platfom: <a href="https://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a> and <a href="http://nsq.io/" target="_blank" rel="external">NSQ</a>, both have their own pros and cons, so let’s evaluate.</p><ul><li><p>Pros of RabbitMQ</p><ul><li>Based on the open standard protocal: <a href="https://www.amqp.org/" target="_blank" rel="external">AMQP</a></li><li>Mature and stable</li><li>Introcude <code>exchange</code> between producer and consumer and fledged with lots of patterns(Direct/Worker/Pub-Sub/Route/RPC…)</li></ul></li><li><p>Cons of RabbitMQ</p><ul><li>A bit steep learning curve</li><li>Not easy to implement retry with failiure.</li></ul></li><li><p>Pros of NSQ</p><ul><li>Good at distributed topologies with no <a href="https://en.wikipedia.org/wiki/Single_point_of_failure" target="_blank" rel="external">SPOF</a>, which means high available(even if some nodes go down you can still use the messaging service)</li><li>One concise message model</li><li>Supoort retry with delay naturally</li></ul></li><li><p>Cons of NSQ</p><ul><li>Messages are not durable by default</li></ul></li></ul><h3 id="Why-we-choose-NSQ"><a href="#Why-we-choose-NSQ" class="headerlink" title="Why we choose NSQ"></a>Why we choose NSQ</h3><p>First, the message model of NSQ is simple and direct. No middle man no broker. All you need do is just define the producer and consumer. If you need fanout or broadcast, you can add multiple channels for the topic.</p><p>Second, we need retry with a delay mechanism. Though it is doable to use RabbitMQ, it’s not so that easy to manage. The main approach for this is using an additional <a href="https://www.rabbitmq.com/dlx.html" target="_blank" rel="external">deadletter exchange</a> to simulate the delay-attempts.<br>Here’s the <a href="http://yuserinterface.com/dev/2013/01/08/how-to-schedule-delay-messages-with-rabbitmq-using-a-dead-letter-exchange/" target="_blank" rel="external">gist of how it works</a>. It’s an unnecessary hassle, so we avoid tit whenever possible.</p><p><img src="/images/microservices-nsq-rabbitmq-2.png" alt=""></p><p>If you use NSQ, you merely need to call <code>requeue()</code> with parameter of delay, then you’re done!</p><p>The last reason we choose NSQ is its core is written by <a href="http://golang.org/" target="_blank" rel="external">Go</a>. Aside fromn Node.js, we also use Go for some of our backend porjects, let’s keep trying and chanlleging new techonolies. :D</p><p><img src="/images/microservices-nsq-rabbitmq-2.png" alt=""></p><p>Something worth mentioning again, NSQ is not perfect and does have its pain points (e.g. if you want to ensure strong message durability), so you should be aware of the following shortcomings. </p><ul><li>No message replication and it’s mainly in memory.</li><li>No publisher confirmation. If there’s a failure in the nsqd node when the message happens to arrive, you lost this message.</li></ul><p>There is <a href="https://github.com/mreiferson/mreiferson.github.com/blob/nsq_roadmap_1/posts/nsq_roadmap.md" target="_blank" rel="external">roadmap</a> of NSQ’s durability and delivery guarantee. To solve the problems above you can duplicate the message with the same topic to ensure it will be delivered at least once(but more than once in most of cases), this means you need your client to de-dupe or make the operation idempotent.</p><h2 id="How-we-use-NSQ"><a href="#How-we-use-NSQ" class="headerlink" title="How we use NSQ"></a>How we use NSQ</h2><p>There’re plenty of client libraries in <a href="http://nsq.io/clients/client_libraries.html" target="_blank" rel="external">NSQ website</a>. We use the offical JavaScript client <a href="https://github.com/dudleycarr/nsqjs" target="_blank" rel="external">nsqjs</a> to build our loopback based microservice. However we are not satisfied with the <code>Writer</code> interface, because you have to known the <code>nsqd</code> address beforehand and pass it to the Writer, which is not at all practical. We may scale the nsqd cluster according the needs and the nsqd itself should be able to auto-discovered(not only for consumer but also for the producer side).</p><p>That’s why we build the library <a href="https://github.com/Wiredcraft/nsq-strategies" target="_blank" rel="external">nsq-strategies</a>, a wrapper of official client library(nsqjs) with different strategies. Currently it supports round-robin and fanout strategies. For example, you now can transfer the lookupd addresses to the producer which means you don’t need to change the code when the nsqd cluster changes and the prodcuer would pick one of nsqd nodes in a round-robin way for sending message.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Producer = <span class="built_in">require</span>(<span class="string">'nsq-strategies'</span>).Producer;</div><div class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> Producer(&#123;</div><div class="line">    lookupdHTTPAddresses: [<span class="string">'127.0.0.1:9011'</span>, <span class="string">'127.0.0.1:9012'</span>]</div><div class="line">  &#125;, &#123;</div><div class="line">    strategy: Producer.ROUND_ROBIN</div><div class="line">  &#125;);</div><div class="line">  p.connect(<span class="function">(<span class="params">errors</span>) =&gt;</span> &#123;</div><div class="line">    p.produce(<span class="string">'topic'</span>, <span class="string">'message'</span>, (err) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><h2 id="Wrapping-things-up"><a href="#Wrapping-things-up" class="headerlink" title="Wrapping things up"></a>Wrapping things up</h2><p>If you are building microservies, you should consider adopting a message queue as a supplement and give it a try with NSQ (or RabbitMQ).<br>Use it then improve it, like we did. That’s the way we build apps that matters.</p><p>Finally thanks to <a href="https://github.com/hopechen1028" target="_blank" rel="external">@hopechen1028</a> and <a href="https://github.com/jonathangoodwin" target="_blank" rel="external">@jonathangoodwin</a> for illustration and help to polish my words.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/microservices-nsq-rabbitmq.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;We-build-Microservices&quot;&gt;&lt;a href=&quot;#We-build-Microservices&quot; class=&quot;headerlink&quot; title=&quot;We build Microservices&quot;&gt;&lt;/a&gt;We build Microservices&lt;/h2&gt;&lt;p&gt;So, what’s the big deal with microservices? Well, there are numerous benefits to building these little guys compared to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Monolithic_system&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;traditional monolithic architecture&lt;/a&gt; of days long gone:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Small codebase&lt;/li&gt;
&lt;li&gt;Reusable&lt;/li&gt;
&lt;li&gt;Loosly coupled&lt;/li&gt;
&lt;li&gt;Easy to enhance and extend&lt;/li&gt;
&lt;li&gt;Easy to deply and scale&lt;/li&gt;
&lt;li&gt;Plug-and-play format&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Nsq" scheme="http://yoursite.com/tags/Nsq/"/>
    
      <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>How to extend Javascript Error</title>
    <link href="http://yoursite.com/2016/06/02/custom-error/"/>
    <id>http://yoursite.com/2016/06/02/custom-error/</id>
    <published>2016-06-02T15:34:10.000Z</published>
    <updated>2016-06-04T14:46:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>When your application becomes larger and more complex, you may find the default Javascript <code>Error</code> is not enough, you might want to use different Errors for different modules or customize it with self-defined properties, then it’s time to extend it properly.<br><a id="more"></a>  </p><h1 id="How-to-extend-error"><a href="#How-to-extend-error" class="headerlink" title="How to extend error"></a>How to extend error</h1><h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><p>It’s quite straightforward, using <code>util.inherits</code> and customize properties, that’s all.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyError</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</div><div class="line">  <span class="keyword">this</span>.message = message;</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(MyError, <span class="built_in">Error</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> MyError(<span class="string">'foo'</span>);</div><div class="line"><span class="built_in">console</span>.log(err);</div></pre></td></tr></table></figure></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>But it’s 2016, we have node v4/v5/v6, you should use es6!<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(message) &#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> MyError(<span class="string">'bar'</span>);</div><div class="line"><span class="built_in">console</span>.log(err);</div></pre></td></tr></table></figure></p><p>However the code above doesn’t work, you will get an error <code>ReferenceError: this is not defined</code>,<br>the reason is forgetting to call <code>super()</code> in constructor, you can refer to <a href="http://stackoverflow.com/questions/31067368/javascript-es6-class-extend-without-super" target="_blank" rel="external">here</a> for details.<br>So is the following code good enough?<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(message) &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> MyError(<span class="string">'bar'</span>);</div><div class="line"><span class="built_in">console</span>.log(err);</div></pre></td></tr></table></figure></p><h2 id="captureStackTrace"><a href="#captureStackTrace" class="headerlink" title="captureStackTrace"></a>captureStackTrace</h2><p>The answer is No if you care about call stack, consider the following code:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(message) &#123;</div><div class="line">    <span class="keyword">super</span>(); <span class="comment">// (A)</span></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  main();</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  <span class="built_in">console</span>.log(e.stack);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  sub();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MyError(<span class="string">'baz'</span>); <span class="comment">// (B)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>You will find the stack frame is from (A) instead of (B), which in most of cases is not expected. The solution is using <a href="https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt" target="_blank" rel="external">captureStackTrace</a>. The defination is as follows.<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">Error</span><span class="selector-class">.captureStackTrace</span>(<span class="selector-tag">targetObject</span><span class="selector-attr">[, constructorOpt]</span>)</div></pre></td></tr></table></figure></p><p>It mainly creates the <code>.stack</code> property for the error which indicates the location where the error is from. The first param is an object which relates to the first line of stack, but just note this sentence in document <code>The first line of the trace, instead of being prefixed with ErrorType: message, will be the result of calling targetObject.toString()</code> , actually it’s not ture, the <code>toString</code> doesn’t work at least for node v4, there’s also a github <a href="https://github.com/nodejs/node/issues/5675" target="_blank" rel="external">issue</a> for it, it just concatenates the <code>name</code> and <code>message</code> together for now, let’s skip it as it’s not so important.</p><p>The second param is what we need to hide the stack frame, given a function, all frame above it(including itself) will be omit from the stack.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(message) &#123;</div><div class="line">    <span class="keyword">super</span>(); <span class="comment">// (A)</span></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">    <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>, MyError); <span class="comment">// added</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  main();</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  <span class="built_in">console</span>.log(e.stack);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  sub();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MyError(<span class="string">'baz'</span>); <span class="comment">// (B)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>This time the stack frame is from (B). Quite simple, isn’t it? </p><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>There’s still something to be imporved in fact, e.g compatibility and robustness, but I will not elaborate here,<br>because there’s already a tiny but convenient <a href="https://github.com/bjyoungblood/es6-error" target="_blank" rel="external">boilerplate</a> you can leverage, give it a try!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h1&gt;&lt;p&gt;When your application becomes larger and more complex, you may find the default Javascript &lt;code&gt;Error&lt;/code&gt; is not enough, you might want to use different Errors for different modules or customize it with self-defined properties, then it’s time to extend it properly.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Why use tj/co</title>
    <link href="http://yoursite.com/2016/05/15/understand-co/"/>
    <id>http://yoursite.com/2016/05/15/understand-co/</id>
    <published>2016-05-15T07:26:05.000Z</published>
    <updated>2016-05-15T07:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>大神<a href="https://github.com/tj" target="_blank" rel="external">tj</a>的<a href="https://github.com/tj/co" target="_blank" rel="external">co</a>已经超过5千star了，之前公司的小伙伴有在用这个模块，那时我还没有开始用es6，对于genenrator也是一知半解，匆匆扫了一眼，说实话没看懂，当时手头也比较忙也就这样先放着了。</p><p>转眼在项目中正式用es6也有半年多了，准备回过头来再学一下co，翻了一下github上的README, 什么鬼？还是没搞懂。。。主要问题是examples只讲了<strong>how</strong>，而没有讲<strong>why</strong>，而这正是我所在意的，我为什么要用这个模块，有什么好处？<br><a id="more"></a>  </p><p>于是在<a href="https://medium.com/" target="_blank" rel="external">Medium</a>上翻到了tj的这篇博客<a href="https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127#.9fw59pduu" target="_blank" rel="external">Callbacks vs Coroutines</a>，<br>看完之后不禁拍案，原来动机如此，co想解决的事原来在我学习generator的时候我也尝试过！</p><p>短话长说（反了？），我们知道es6 generator function可以重复进入，程序运行到yield语句时，控制权转移到function外部，调next的时候，控制权回来。然而generator内的代码看上去是同步顺序执行的，<br>这不正是一个能完美的将异步调用转成类似同步执行的特性吗？（没错，对于天生异步的node.js，人们一直致力于将它拧巴地或优雅地转换成人类习惯的同步方式中)</p><p>上代码：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> myrequest(<span class="string">"http://some.url"</span>);</div><div class="line">  <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(result);</div><div class="line">  <span class="built_in">console</span>.log(res.msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myrequest</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  makeAjaxCall(url, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    gen.next(response);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gen = main();</div><div class="line">gen.next();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">  <span class="built_in">require</span>(<span class="string">'request'</span>)(<span class="string">'http://some.url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</div><div class="line">    callback(body);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看出主逻辑（main）是同步的而且很清晰，但是异步并没有平白消失，只是它们被移到了别的地方（makeAjaxCall），但是我们保证了主控制流是同步的，你可以说这是语法糖也好，但是promise也不是类似的思路么？<br>事实上co也是如此，就如同上面一样利用generator的特性来扭转控制流，当然比我上面的例子更优雅更强大（强壮）。</p><p>上面的代码用co重写后是这样的：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> promiseAjax = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'request-promise'</span>).get(<span class="string">'http://some.url'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result =  <span class="keyword">yield</span> promiseAjax();</div><div class="line">  <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(result);</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(r);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>所以在面对callback hell的时候除了<a href="https://github.com/caolan/async" target="_blank" rel="external">aysnc</a>, promise外又多了一个好办法。</p><p>下一步我要好好读一下co的源码，我建议你也这样做，或者至少你应该看一下这篇博客<a href="https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127#.9fw59pduu" target="_blank" rel="external">Callbacks vs Coroutines</a>，我相信会让你受益匪浅的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大神&lt;a href=&quot;https://github.com/tj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tj&lt;/a&gt;的&lt;a href=&quot;https://github.com/tj/co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;co&lt;/a&gt;已经超过5千star了，之前公司的小伙伴有在用这个模块，那时我还没有开始用es6，对于genenrator也是一知半解，匆匆扫了一眼，说实话没看懂，当时手头也比较忙也就这样先放着了。&lt;/p&gt;
&lt;p&gt;转眼在项目中正式用es6也有半年多了，准备回过头来再学一下co，翻了一下github上的README, 什么鬼？还是没搞懂。。。主要问题是examples只讲了&lt;strong&gt;how&lt;/strong&gt;，而没有讲&lt;strong&gt;why&lt;/strong&gt;，而这正是我所在意的，我为什么要用这个模块，有什么好处？&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="flow-control" scheme="http://yoursite.com/tags/flow-control/"/>
    
  </entry>
  
  <entry>
    <title>How to leave focus from Chrome address bar without mouse</title>
    <link href="http://yoursite.com/2016/03/07/vimium-leave-address-bar/"/>
    <id>http://yoursite.com/2016/03/07/vimium-leave-address-bar/</id>
    <published>2016-03-07T15:45:05.000Z</published>
    <updated>2016-03-07T15:53:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a vimer, I have been using a plugin called <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" target="_blank" rel="external">Vimium</a> in chrome for a long time. It keeps me to play with the browser in vim hotkey conventions, therefore I don’t need mouse or touchpad to scroll/jump link/history back etc, however there is one thing sometimes annoys me, the <strong>address bar</strong>.<br><a id="more"></a>  </p><p>Although most of the time you can use <code>o</code> or <code>O</code> to open URL or history in current tab or new tab, <code>Ctrl-L</code> to highlight the address bar and modifying the URL is not a rare case.<br>Here comes the issue, when the address bar is highlighted(i.e in input mode), unless you click the <code>enter</code> to reload the whole page the vimium is not active, neither can you expect to press <code>esc</code> to back to the page.</p><p>In such situation, to get focus back to the page, you have 3 choices:</p><ol><li>use mouse to click the page(html body), this is the most straightforward one but I don’t want to move my fingers from keyboard, so it passed.</li><li>use tab, it can move focus to the next control in browser and eventually you can focus on html body and continue the vimium key shortcuts.<br>However, if you are a guy as me has lots of plugins installed, you have to tab multiple times to get the focus on page. It’s no ideal solution.<br><img src="/images/chrome-plugins.png" alt=""></li><li>This one is a bit tricky but it works. <code>Cmd-F</code>(Or <code>Ctrl-F</code> at Windows) to trigger the search box, and input any character(the simplest one is <code>blank</code>) then <code>esc</code>, it brings you back to web page as well, but this solution has two cons:<ul><li>It needs 3 key-strokes, not so concise.</li><li>If you are in the middle of the page(by scrolling or whatever way), then the combination above will always bring you back to the top of page. Quite annoying, isn’t it?</li></ul></li></ol><p>Thanks to the <a href="http://superuser.com/users/106061/reycharles" target="_blank" rel="external">@ReyCharles</a> ‘s answer <a href="http://superuser.com/questions/324266/google-chrome-mac-set-keyboard-focus-from-address-bar-back-to-page/324267#324267" target="_blank" rel="external">here</a>, got the Holy Grail as follows,</p><ol><li>In search engines setting, add a new one.</li><li>Name the new engine with whatever you like, I named it as <code>leaveAddressBar</code>.</li><li>A simple hot key for <code>Keyword</code>, as the illustration I used <code>u</code>.</li><li>In <code>URL</code> field, input <code>javascript:</code>, this is the point which moves focus back to the page.<br><img src="/images/search-engine.png" alt=""></li></ol><p>Done, now feel free to fiddle the address bar without mouse!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a vimer, I have been using a plugin called &lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vimium&lt;/a&gt; in chrome for a long time. It keeps me to play with the browser in vim hotkey conventions, therefore I don’t need mouse or touchpad to scroll/jump link/history back etc, however there is one thing sometimes annoys me, the &lt;strong&gt;address bar&lt;/strong&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Is empty array in JavaScript truthy or falsy?</title>
    <link href="http://yoursite.com/2015/12/15/js-coercion/"/>
    <id>http://yoursite.com/2015/12/15/js-coercion/</id>
    <published>2015-12-15T15:25:35.000Z</published>
    <updated>2016-05-15T07:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today, one of my friends argued with me about the empty array <code>[]</code>, he think it’s falsy but in my experience I persist it should be truthy.<br><a id="more"></a><br>So, I demo it as follows:<br><figure class="highlight smali"><table><tr><td class="code"><pre><div class="line">var a = [];</div><div class="line">if (a) console.log('empty<span class="built_in"> array </span>is truthy');</div></pre></td></tr></table></figure></p><p>Or you can also use double logical NOT to cast it to boolean, it’s the same.<br><figure class="highlight smali"><table><tr><td class="code"><pre><div class="line">var a = [];</div><div class="line">if (!!a) console.log('empty<span class="built_in"> array </span>is truthy');</div></pre></td></tr></table></figure></p><p>Looking the the evidence sentence shown in the screen, I think the argument is over till he shows me the following code,<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log([] == <span class="literal">false</span>);</div></pre></td></tr></table></figure></p><h2 id="Guess-what"><a href="#Guess-what" class="headerlink" title="Guess what?"></a>Guess what?</h2><p>The result is <strong>true</strong>. Woooooot? Well, I know there must be something wrong, escpecially the suspicous loose equality operation. I have to figure it out why it has such odd behaviour.</p><h2 id="Type-Coertion"><a href="#Type-Coertion" class="headerlink" title="Type Coertion"></a>Type Coertion</h2><p>There are both awesome articles about the equality comparison algorithm in JavaScript world.</p><ul><li><a href="http://bclary.com/2004/11/07/#a-11.9.3" target="_blank" rel="external">http://bclary.com/2004/11/07/#a-11.9.3</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness</a><br><img src="/images/js-coercion-table.png" alt=""><br>–<em>table from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness</a></em></li></ul><p>The key point is applying <code>ToPrimitive([])</code> and <code>ToNumber(false)</code>, then compare them.</p><h3 id="What’s-ToPrimitive"><a href="#What’s-ToPrimitive" class="headerlink" title="What’s ToPrimitive?"></a>What’s ToPrimitive?</h3><p>ToPrimitive is a internal operation which attempts to convert its object argument to a primitive value, by attempting to invoke varying sequences of <code>toString</code> and <code>valueOf</code> methods on the Object. The detail steps can be found here: <a href="http://bclary.com/2004/11/07/#a-9.1" target="_blank" rel="external">http://bclary.com/2004/11/07/#a-9.1</a><br>So, firstly try <code>[].valueOf()</code> which returns itself, it’s not primitive, then try to call <code>[].toString</code>, for <code>Array.toString</code>, according <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString" target="_blank" rel="external">MDN</a>, </p><blockquote><p>For Array objects, the toString method joins the array and returns one string containing each array element separated by commas. </p></blockquote><p>This means we get the empty string <code>&#39;&#39;</code>.</p><h3 id="What’s-the-ToNumber"><a href="#What’s-the-ToNumber" class="headerlink" title="What’s the ToNumber?"></a>What’s the ToNumber?</h3><p>Basically apply the <code>+</code> operation on the target, for boolean, </p><blockquote><p> 1 if the argument is true. +0 if the argument is false.</p></blockquote><p>for other types refer to :<a href="http://bclary.com/2004/11/07/#a-9.3" target="_blank" rel="external">http://bclary.com/2004/11/07/#a-9.3</a></p><h2 id="Problem-now-is-simplified"><a href="#Problem-now-is-simplified" class="headerlink" title="Problem now is simplified"></a>Problem now is simplified</h2><p>Is <code>&#39;&#39; == 0</code> truthy or falsy? Again begin with applying <code>ToNumber</code> to emtpy string <code>&#39;&#39;</code>, the rules is complicated <a href="http://bclary.com/2004/11/07/#a-9.3.1" target="_blank" rel="external">here</a> but for empty string it’s simple as follows,</p><blockquote><p>A StringNumericLiteral that is empty or contains only white space is converted to +0.</p></blockquote><p>So, <code>0 === 0</code>? Surely it’s true.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Do <strong>NOT</strong> use loose eqality operation, it’s complex and confusing even for experienced JavaScript developers. Although the only exception is checking with null and undefined because either is equal to itself. i.e <code>foo != null</code> is equivalent to <code>foo !== null</code> &amp;&amp; <code>foo !== undefined</code>. However, I don’t recommend this way for less typing leads more confusion, the reader may even doubt whether the author forgot a <code>=</code> or not.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today, one of my friends argued with me about the empty array &lt;code&gt;[]&lt;/code&gt;, he think it’s falsy but in my experience I persist it should be truthy.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>It&#39;s time to make a changelog</title>
    <link href="http://yoursite.com/2015/12/13/changelog/"/>
    <id>http://yoursite.com/2015/12/13/changelog/</id>
    <published>2015-12-13T14:01:33.000Z</published>
    <updated>2015-12-13T14:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What’s-changelog-and-why-use-it"><a href="#What’s-changelog-and-why-use-it" class="headerlink" title="What’s changelog and why use it?"></a>What’s changelog and why use it?</h2><p>Changelog records the history changes for a development, it lets users or contributors easily find what’s changed in the certain release or tag.<br>Usually it containes records as fix bugs, features, deprecated or something else. Normally it’s named with <code>CHANGELOG.md</code>, <code>History.md</code> etc. although the best convension I think is <code>CHANGELOG.md</code>.<br>Here is a pretty well post with comprehensive description for <strong>changelog</strong>. <a href="http://keepachangelog.com/" target="_blank" rel="external">http://keepachangelog.com/</a> and from there you can also find why use changelog.<br><a id="more"></a>  </p><h2 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h2><p>There are serveral approaches for creating changelog.</p><h3 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h3><p>Absolutelly in this way your changelog will be most valuable as long as you care it. The cons is it costs some extra effort. For me, as I’m a lazy developer, I don’t like this way.</p><h3 id="git-changelog"><a href="#git-changelog" class="headerlink" title="git changelog"></a>git changelog</h3><p>This is a command in <a href="https://github.com/tj/git-extras/blob/master/Commands.md#git-changelog" target="_blank" rel="external">git-extra</a>. It dumps the commits into the changelog with a tag name and is very easy to use. However, just wrapping development commits into a changelog also makes it meanningless because most of time it ends up with trival information such as <code>fix typo</code>. </p><blockquote><p>As is the difference between good comments and the code itself, so is the difference between a change log and the commit log: one describes the why, the other the how.</p><footer><strong>http://keepachangelog.com/</strong></footer></blockquote><h3 id="github-changelog-generator"><a href="#github-changelog-generator" class="headerlink" title="github-changelog-generator"></a>github-changelog-generator</h3><p>If your project is highly relied on github features, (github-changelog-generator)[] is a good choice. It automatically collects the issues, pull requests, tags and labels<br>into the changelog. The cons is that don’t forget to make issues for you notable changes, bug fix and also have to label them, actually I don’t think it’s a cons because<br>thosse activities mentioned above are after all the best practises you should adhere to, right?</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>No matter which approache you use, the important point is that you care about changelog and take care of it. You will have prifited from it.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What’s-changelog-and-why-use-it&quot;&gt;&lt;a href=&quot;#What’s-changelog-and-why-use-it&quot; class=&quot;headerlink&quot; title=&quot;What’s changelog and why use it?&quot;&gt;&lt;/a&gt;What’s changelog and why use it?&lt;/h2&gt;&lt;p&gt;Changelog records the history changes for a development, it lets users or contributors easily find what’s changed in the certain release or tag.&lt;br&gt;Usually it containes records as fix bugs, features, deprecated or something else. Normally it’s named with &lt;code&gt;CHANGELOG.md&lt;/code&gt;, &lt;code&gt;History.md&lt;/code&gt; etc. although the best convension I think is &lt;code&gt;CHANGELOG.md&lt;/code&gt;.&lt;br&gt;Here is a pretty well post with comprehensive description for &lt;strong&gt;changelog&lt;/strong&gt;. &lt;a href=&quot;http://keepachangelog.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://keepachangelog.com/&lt;/a&gt; and from there you can also find why use changelog.&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Merge vs Rebase</title>
    <link href="http://yoursite.com/2015/11/27/merge-vs-rebase/"/>
    <id>http://yoursite.com/2015/11/27/merge-vs-rebase/</id>
    <published>2015-11-27T15:55:16.000Z</published>
    <updated>2015-12-13T13:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>Nowadays lots of teams use git as the VCS, one of most power feature of git is branching, so it’s not uncommon that we need to frequently incorporate feasures into master or vise versa. As you know, there are two approches <code>merge</code> and <code>rebase</code>.<br>Then you may be wondering shall we use <code>git merge</code> or <code>git rebase</code>? The debates between these two is a bit controvertial and also there is holy-wars likes <code>vim vs emacs</code> or <code>Tabs vs Spaces</code> between them, here I have no interest to join the debate, which means I am not talking which one is better, but in a certain scenario whichone is more suitable.<br><a id="more"></a></p><h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>Merge brings the commits in one branch which are not in the other(current) branch into the current branch with a <strong>merge</strong> commit.<br><figure class="highlight livescript"><table><tr><td class="code"><pre><div class="line">A<span class="function"> -&gt;</span> B<span class="function"> -&gt;</span> C (master)</div><div class="line">      <span class="string">\</span></div><div class="line">       D<span class="function"> -&gt;</span> E (feature)</div></pre></td></tr></table></figure></p><p>Base upon the commit trees above, <code>git merge master</code> on feature branch leads to:<br><figure class="highlight livescript"><table><tr><td class="code"><pre><div class="line">A<span class="function"> -&gt;</span> B<span class="function">  -&gt;</span>   C    (master)</div><div class="line">      <span class="string">\</span>        <span class="string">\</span></div><div class="line">       D<span class="function"> -&gt;</span> E<span class="function"> -&gt;</span> F(feature)</div></pre></td></tr></table></figure></p><p>The commit <code>F</code> is a merge commit with two parents (Note the <code>Merge:</code> line below) something likes<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">commit 6ff74286c4573adf2e330d59ee1aaa8841f756a9</div><div class="line">Merge: 1df0415 70e1786</div><div class="line">Author: xavierzhou &lt;xiayezhou#googlemail.com&gt;</div><div class="line">Date:   Sun Nov 22 23:25:37 2015 +0800</div><div class="line"></div><div class="line">    Merge branch &apos;feature&apos;</div></pre></td></tr></table></figure></p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>Rebase also brings the commits in one branch which are not in the other(upstream) branch into the upstream branch with a <strong>transplant</strong> way.<br><figure class="highlight livescript"><table><tr><td class="code"><pre><div class="line">A<span class="function"> -&gt;</span> B<span class="function"> -&gt;</span> C (master)</div><div class="line">      <span class="string">\</span></div><div class="line">       D<span class="function"> -&gt;</span> E (feature)</div></pre></td></tr></table></figure></p><p>Base upon the commit trees above, <code>git rebase master</code> at feature leads to:<br><figure class="highlight livescript"><table><tr><td class="code"><pre><div class="line">A<span class="function"> -&gt;</span> B<span class="function"> -&gt;</span> C (master)</div><div class="line">           <span class="string">\</span>      </div><div class="line">            D<span class="function"> -&gt;</span> E (feature)</div></pre></td></tr></table></figure></p><p>Here you can find the hisotry of feature branch is changed.(from <code>A-&gt;B-&gt;D-&gt;E</code> to <code>A-&gt;B-&gt;C-&gt;D-&gt;E</code>), keep this in mind, it’s very important!</p><h1 id="Usage-Scenario"><a href="#Usage-Scenario" class="headerlink" title="Usage Scenario"></a>Usage Scenario</h1><h2 id="Working-on-master-and-wanna-bring-other-branch-back"><a href="#Working-on-master-and-wanna-bring-other-branch-back" class="headerlink" title="Working on master and wanna bring other branch back"></a>Working on master and wanna bring other branch back</h2><ul><li>Best practise:<br>Always use merge please! i.e <code>git checkout master &amp;&amp; git merge feature</code>.</li><li>Explanation:<br>You still remember the <code>rebase</code> will change the history of branch? Altering the master branch history will makes other collabrator confuse and stuck.</li></ul><h2 id="Sitting-in-a-feature-branch-and-wanna-take-in-the-changeset-happened-in-master"><a href="#Sitting-in-a-feature-branch-and-wanna-take-in-the-changeset-happened-in-master" class="headerlink" title="Sitting in  a feature branch and wanna take in the changeset happened in master"></a>Sitting in  a feature branch and wanna take in the changeset happened in master</h2><ul><li>Best practise:<br>Both <code>merge</code> and <code>rebase</code> are appropriate. i.e <code>git merge master</code> or <code>git rebase master</code>.</li><li>Explanation:<br>If you prefer linear history and clean log for this feature, you should use <code>rebase</code>, if you prefer to keep the historical context then use <code>merge</code>.<br>N.B.<br>If you have pushed the branch to remote or as a Pull Request, make sure nobody will fetch your branch if you used <code>rebase</code> since it changes the history.</li></ul><h2 id="Woking-on-a-branch-which-hasn’t-been-published-push-and-wanna-clean-up"><a href="#Woking-on-a-branch-which-hasn’t-been-published-push-and-wanna-clean-up" class="headerlink" title="Woking on a branch which hasn’t been published(push) and wanna clean up"></a>Woking on a branch which hasn’t been published(push) and wanna clean up</h2><ul><li>Best practise:<br><code>git rebase -i</code> is what you need.</li><li>Explanation:<br>It’s not rare that you finished some works with a commit, and realized <code>Damn, forgot to add some file!</code> or <code>Sh*t, another typo here</code> things. Then you makes more commits with<br>those fixs and your <code>git log</code> looks rather ugly as follows, <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">121ca50 Fix another typo</div><div class="line">b253d57 Fix typo</div><div class="line">60bfba2 Add forgot config files</div><div class="line">ae6058c Implement feature</div></pre></td></tr></table></figure></li></ul><p>You can use <code>git rebase -i HEAD~4</code> to clean up history, which brings the default editor for git, and you now can <code>reword</code>, <code>squash</code>, <code>fixup</code> or even just remove some commits.</p><h2 id="A-pull-request-was-reviewed-or-approved-and-about-to-be-merged-back-to-master"><a href="#A-pull-request-was-reviewed-or-approved-and-about-to-be-merged-back-to-master" class="headerlink" title="A pull request was reviewed or approved and about to be merged back to master."></a>A pull request was reviewed or approved and about to be merged back to master.</h2><ul><li>Best practise:<br>It’s a good timing to use <code>rebase</code> to clean up if you donn’t want to keep the review/feedback changes in the pull request.</li><li>Explanation:<br>Althought in this case the pull request is considered as a published one, since it will immediately be merged back and removed,<br>no one will fetch and care it soon, it’s safe to be <code>rebase</code>ed.</li></ul><h1 id="Golden-Rule-for-rebase"><a href="#Golden-Rule-for-rebase" class="headerlink" title="Golden Rule for rebase"></a>Golden Rule for rebase</h1><p>Remember <code>rebase</code> changes the history of branch, <strong>NEVER</strong> do it at the branch which may be fetched by other collabrators who plans to continue works upon it.</p><h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p><a href="http://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge" target="_blank" rel="external">http://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge</a><br><a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing/conceptual-overview" target="_blank" rel="external">https://www.atlassian.com/git/tutorials/merging-vs-rebasing/conceptual-overview</a><br><a href="https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase/" target="_blank" rel="external">https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;Nowadays lots of teams use git as the VCS, one of most power feature of git is branching, so it’s not uncommon that we need to frequently incorporate feasures into master or vise versa. As you know, there are two approches &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt;.&lt;br&gt;Then you may be wondering shall we use &lt;code&gt;git merge&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt;? The debates between these two is a bit controvertial and also there is holy-wars likes &lt;code&gt;vim vs emacs&lt;/code&gt; or &lt;code&gt;Tabs vs Spaces&lt;/code&gt; between them, here I have no interest to join the debate, which means I am not talking which one is better, but in a certain scenario whichone is more suitable.&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>farewell fujixerox</title>
    <link href="http://yoursite.com/2015/10/23/farewell-fx/"/>
    <id>http://yoursite.com/2015/10/23/farewell-fx/</id>
    <published>2015-10-23T15:33:06.000Z</published>
    <updated>2015-12-13T13:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>和之璧，井里之厥也。玉人琢之，为天子宝 –《荀子》</p><p>终于离开FX了，在SDCC呆了9个年头，真的不算短了。<br>  好多朋友问我，在500强公司，你从Engineer做到Leader再到Supervisor，一切不是挺好到吗? 是的，从职场的角度看，还算顺利，可是扪心自问,这真是自己想要的吗？<br><a id="more"></a><br>答案是否定的。</p><p>  和我一起进公司的同期们，但凡比较努力的也都陆陆续续做了Leader或Supervisor，大家自然而然地离开了coding，开始了各种报告，整报表，数据分析，和客户扯皮，找老板抢资源等等<em>管理</em>活动。当然，其中有些是有价值的工作，有些只是在这个庞大的组织机构的臃肿的流程中的转圈圈而已。可能我是少数的每天坚持弄代码弄技术的家伙吧，可是当效益和流程被各种放大，产品和创造力慢慢地被忽视，环顾四周：</p><p>  “嗨，我们不是专业的软件开发者吗，不敢奢求做出改变世界的东东，大家不想捣鼓些有价值的玩意儿吗？”</p><p>  没有声音，于是我发现，在这里再也找不到可以追赶的背影了。 </p><p>  Sigh…</p><p>  罢了，我只是个软件手艺人, 包工头真的不适合我(尽管为公司获得最大利润是他们非常职业的行为, 绝无轻视之意）, 所谓匠心，不就是把热情都倾注在作品上的一种态度吗？<br>  所以，为了专注于作品，我来到了<a href="https://wiredcraft.com/" target="_blank" rel="external">琢品</a>。期待中，并准备迎接挑战。</p><p>  在此也感谢<a href="https://github.com/dreamhead" target="_blank" rel="external">dreamhead</a>, 虽然只有一面之缘，让我见识了什么是真正的专业人士，也让我有了一个可望不可及的追赶的目标。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和之璧，井里之厥也。玉人琢之，为天子宝 –《荀子》&lt;/p&gt;
&lt;p&gt;终于离开FX了，在SDCC呆了9个年头，真的不算短了。&lt;br&gt;  好多朋友问我，在500强公司，你从Engineer做到Leader再到Supervisor，一切不是挺好到吗? 是的，从职场的角度看，还算顺利，可是扪心自问,这真是自己想要的吗？&lt;br&gt;
    
    </summary>
    
    
      <category term="thinking" scheme="http://yoursite.com/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>vim-snippets</title>
    <link href="http://yoursite.com/2015/09/14/vim-snippets/"/>
    <id>http://yoursite.com/2015/09/14/vim-snippets/</id>
    <published>2015-09-14T14:06:59.000Z</published>
    <updated>2016-03-09T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自我感觉作为一个程序员，还算得上一个比较有效率的人，最近拜读<em>程序人生</em>的技术专栏<a href="http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;mid=206041450&amp;idx=1&amp;sn=3982c8cc45d7c47f0fbc19fe8371490f&amp;scene=0#rd" target="_blank" rel="external">程序员效率指南</a>, 不由得自省了一把，其他还马马虎虎，作一个VIM用了2，3年的programmer，(虽然偶尔也用WebStrom和InteliJ, 毕竟vim是自己的主力editor)，尴尬了，尽管也有neocomplete等一干plugin助力，居然没有用过snippets….亡羊补牢吧。<br><a id="more"></a></p><h1 id="Snippets-Plugin-for-Vimer"><a href="#Snippets-Plugin-for-Vimer" class="headerlink" title="Snippets Plugin for Vimer"></a>Snippets Plugin for Vimer</h1><ol><li><a href="https://github.com/SirVer/ultisnips" target="_blank" rel="external">SirVer/ultisnips</a></li><li><a href="https://github.com/honza/vim-snippets" target="_blank" rel="external">honza/vim-snippets</a><br>ultisnips是snippets enginne，要配合honza/vim-snippets一起用。(画外音：“我知道，要两粒在一起吃才好”)</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>github上已经有的就不写了，如果你和我一样用的不是vundle, 而是pathogen的话，<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.vim/bundle</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/SirVer/ultisnips</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/honza/vim-snippets</div></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight vim"><table><tr><td class="code"><pre><div class="line"><span class="comment">" Trigger configuration. Do not use &lt;tab&gt; if you use https://github.com/Valloric/YouCompleteMe.</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsExpandTrigger</span>=<span class="string">"&lt;tab&gt;"</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsJumpForwardTrigger</span>=<span class="string">"&lt;c-j&gt;"</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsJumpBackwardTrigger</span>=<span class="string">"&lt;c-k&gt;"</span></div><div class="line"></div><div class="line"><span class="comment">" If you want :UltiSnipsEdit to split your window.</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsEditSplit</span>=<span class="string">"vertical"</span></div></pre></td></tr></table></figure><p><code>UltiSnipsExpandTrigger</code>较好理解，就是触发展开snippet的热键, <code>UltiSnipsJumpForwardTrigger</code>和<code>UltiSnipsJumpBackwardTrigger</code>是控制tabstop的热键，后面有详述。</p><h2 id="如何自定义"><a href="#如何自定义" class="headerlink" title="如何自定义"></a>如何自定义</h2><p>我自己写JavaScript会比较多，根据<a href="https://github.com/honza/vim-snippets/tree/master/snippets/javascript，" target="_blank" rel="external">https://github.com/honza/vim-snippets/tree/master/snippets/javascript，</a><br>除了通用的<a href="https://github.com/honza/vim-snippets/blob/master/snippets/javascript/javascript.snippets" target="_blank" rel="external">JavaScript Snippets</a>之外，还有jquery, d3, requirejs, node专有的snippets, 基本够用，当然总有一天你会想自己定制snippet…</p><h3 id="Snip-Search-Path"><a href="#Snip-Search-Path" class="headerlink" title="Snip Search Path"></a>Snip Search Path</h3><p>snippet目录必须是｀runtimepath`的子目录，可以在下面配置中自己修改。<br><figure class="highlight vim"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsSnippetDirectories</span>=[<span class="string">"UltiSnips"</span>]</div></pre></td></tr></table></figure></p><p>UltiSnips会根据以下策略去找snippet文件：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">ft<span class="selector-class">.snippets</span>, ft_*<span class="selector-class">.snippets</span>, or ft<span class="comment">/*</span></div></pre></td></tr></table></figure></p><p>其中<code>ft</code>是当前文档的filetype。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>非常简单，<code>snippet</code>开始，<code>endsnippet</code>结束。定义格式：<code>snippet tab_trigger [ &quot;description&quot; [ options ] ]</code><br><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">snippet <span class="keyword">if</span> <span class="string">"if ... then (if)"</span></div><div class="line"><span class="keyword">if</span> $&#123;<span class="number">2</span><span class="symbol">:</span>[[ $&#123;<span class="number">1</span><span class="symbol">:condition</span>&#125; ]]&#125;; <span class="keyword">then</span></div><div class="line">        $&#123;<span class="number">0</span><span class="symbol">:</span><span class="comment">#statements&#125;</span></div><div class="line">fi</div><div class="line">endsnippet</div></pre></td></tr></table></figure></p><p>就是说你输入<code>if</code>的话，<code>if...fi</code>整个block会被插入。</p><h3 id="Visual-Placeholder"><a href="#Visual-Placeholder" class="headerlink" title="Visual Placeholder"></a>Visual Placeholder</h3><p>Snippets中特殊的placeholder: <code>${VISUAL}</code>， visual mode 中选中的内容会被替换进来。触发如下：<br>选中-&gt; <code>&lt;tab&gt;</code> -&gt; tag_trigger -&gt; <code>&lt;tab&gt;</code></p><h3 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h3><p>snippets中可以使用shellcode, vimscript, python等，用    `(backtick)包起来就行。</p><h3 id="Tabstop-和-Placeholder"><a href="#Tabstop-和-Placeholder" class="headerlink" title="Tabstop 和 Placeholder"></a>Tabstop 和 Placeholder</h3><p>这部分保证了固定结构的snippets中可以输入可变的部分，tabstop用来控制光标在几个变量间跳转。<br><figure class="highlight gams"><table><tr><td class="code"><pre><div class="line">snippet letter</div><div class="line">Dear <span class="symbol">$</span><span class="number">1</span>,</div><div class="line"><span class="meta"><span class="meta-keyword">$0</span></span></div><div class="line">Yours sincerely,</div><div class="line"><span class="meta"><span class="meta-keyword">$2</span></span></div><div class="line">endsnippet</div></pre></td></tr></table></figure></p><p>输入<code>letter</code>后按<code>&lt;tab&gt;</code>, snippet会被插入，然后<code>&lt;c-j&gt;</code>,<code>&lt;c-k&gt;</code>就可以在<code>$1</code> <code>$2</code>之间跳转，注意<code>$0</code>是最后一个位置，到了<code>$0</code>以后就不能再跳转了，往回跳也不行。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>请参考<a href="https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt" target="_blank" rel="external">https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;自我感觉作为一个程序员，还算得上一个比较有效率的人，最近拜读&lt;em&gt;程序人生&lt;/em&gt;的技术专栏&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=206041450&amp;amp;idx=1&amp;amp;sn=3982c8cc45d7c47f0fbc19fe8371490f&amp;amp;scene=0#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员效率指南&lt;/a&gt;, 不由得自省了一把，其他还马马虎虎，作一个VIM用了2，3年的programmer，(虽然偶尔也用WebStrom和InteliJ, 毕竟vim是自己的主力editor)，尴尬了，尽管也有neocomplete等一干plugin助力，居然没有用过snippets….亡羊补牢吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2015/09/14/hello-world/"/>
    <id>http://yoursite.com/2015/09/14/hello-world/</id>
    <published>2015-09-14T05:33:06.000Z</published>
    <updated>2016-03-22T15:10:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a>  </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
