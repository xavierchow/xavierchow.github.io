<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A JOURNEY OF A SOFTWARE CRAFTSMAN</title>
  
  <subtitle>Coding and Fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-08-29T16:12:41.642Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xavier Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Performance tuning Part 1</title>
    <link href="http://yoursite.com/2023/08/29/Performance-tuning-part1/"/>
    <id>http://yoursite.com/2023/08/29/Performance-tuning-part1/</id>
    <published>2023-08-29T15:14:29.000Z</published>
    <updated>2023-08-29T16:12:41.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prelude"><a href="#Prelude" class="headerlink" title="Prelude"></a>Prelude</h1><p>We received a critical incident report from Project X on the Production environment. The CPU of the Database (i.e. <a href="https://www.couchbase.com/" target="_blank" rel="noopener">Couchbase</a>, more specifically, a bucket called members) increased drastically and reached 100%, and the system became unavailable for a few hours.</p><p>The lucky thing was that the system was restored after the traffic spike ceased, but the sad thing was …</p><p>We didn’t know where the traffic was from and why it caused intensive CPU usage on Database, so the symptom may happen again in future.</p><a id="more"></a><h1 id="Attempts"><a href="#Attempts" class="headerlink" title="Attempts"></a>Attempts</h1><p>An unknown root cause won’t block us from improvements; we are an efficient team after all. We carried out two plans according to some findings and assumptions.</p><p>Firstly, we checked the <a href="https://query-tutorial.couchbase.com/tutorial/#1" target="_blank" rel="noopener">N1QL</a> monitor dashboard, and found there was <a href="https://docs.couchbase.com/server/current/n1ql/n1ql-rest-api/exnamed.html" target="_blank" rel="noopener">named parameters</a> in some N1QL queries, which we reckon to be a slow query pattern, the improvement can be achieved by bumping up the version of the loopback-n1ql-mixin plugin with the <a href="https://github.com/Wiredcraft/loopback-n1ql-mixin/pull/53" target="_blank" rel="noopener">fix</a>; what a low-hanging fruit! </p><p>Secondly, you must heard, “Hardware is cheap, programmers are expensive.” If the Database is exhausted by CPU usage, let’s just give it more! Soon, the Database was upgraded from spec  4core 14G to  8 core 16G.</p><h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>We need a way to see whether the two aforementioned improvements work. The team prepared a performance test script with <a href="https://k6.io/" target="_blank" rel="noopener">k6</a>. The script asesses two APIs on the backend component. (Don’t ask me why testing these two :-P )</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># API-1</span></span><br><span class="line">GET <span class="regexp">/api/i</span>nternal<span class="regexp">/users/</span>query?filter= &#123; where: &#123;</span><br><span class="line">  or: [</span><br><span class="line">  &#123; <span class="string">'oidc.sub'</span>: testUserFederationId &#125;,</span><br><span class="line">  &#123; <span class="string">'email'</span>: testUserEmail&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># API-2</span></span><br><span class="line"><span class="builtin-name">GET</span> /api/admin/memberships</span><br></pre></td></tr></table></figure><p>Surprisingly (should I?), there was barely any difference/improvement with the perf testing under 1k/2k/3k VUs, the CPU usage was still high; it just dropped from 75% to 70% even though we bumped 4vCPU to 8vCPU.</p><p><em>note: VU means virtual user, see: <a href="https://k6.io/docs/get-started/running-k6/#adding-more-vus" target="_blank" rel="noopener">https://k6.io/docs/get-started/running-k6/#adding-more-vus</a></em></p><p><strong>What has been set wrong, then? </strong></p><h1 id="Revisiting"><a href="#Revisiting" class="headerlink" title="Revisiting"></a>Revisiting</h1><p>We were wrong, the mistake was not about the solution’s effectiveness but about a tactical wrong direction. Due to some reasons, the team didn’t face up to the problem to find the root cause/bottleneck but chose to use a quick and no-brainer way, which eventually was a slow and inefficient.</p><blockquote><p>A body remains at rest, or in motion at a constant speed in a straight line, unless acted upon by a force<br>– Newton’s laws of motion</p></blockquote><p>Inspired by Newton’s law, we recalled that the CPU usage of DB was quite low and stable; something must be changed. What was the force then?</p><p>Thanks to the logging platform, with the help from the DevOps team, we cross-checked the timeline of the incident with the volume of requests, and identified a suspicious API was called heavily compared to the normal traffic(30% increase)<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">http<span class="variable">s:</span>//admin.some-<span class="built_in">system</span>.xxx.<span class="keyword">com</span>/api/internal/users/query?<span class="built_in">filter</span>=&#123;</span><br><span class="line">  <span class="string">"where"</span>:&#123;</span><br><span class="line">    <span class="string">"or"</span>:[&#123;<span class="string">"email"</span>:<span class="string">"xxxx"</span>&#125;,&#123;<span class="string">"oidc.sub"</span>:<span class="string">"xxxx"</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is the exact API tested by the performance test script,  calling it under 3K VUs did increase the CPU usage dramatically, so does it make sense that we say this API has performance issues and needs improvement?</p><p>No, we can not. </p><p>Whenever we say a problem or an issue, it contains a few critical aspects, i.e., under a particular <strong>Condition</strong>, there is a <strong>Gap</strong> comparing the <strong>Actual Situation</strong> to the <strong>Expectation</strong>.<br>We know the increase of API calls is the trigger, and the high CPU usage is the result, but where is the expectation? Should that API be called so frequently? What is an appropriate rate,  will 100 RPS be good enough from the perspective of the caller? Or should that API be called by the caller at all?</p><p>All of those questions are homework for the team to answer; before we get the expected benchmark, it doesn’t hurt we should know the actual capability (current RPS) of this API for clarity.</p><p>Let’s continue with the next part, tuning with k6 to identify the RPS.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prelude&quot;&gt;&lt;a href=&quot;#Prelude&quot; class=&quot;headerlink&quot; title=&quot;Prelude&quot;&gt;&lt;/a&gt;Prelude&lt;/h1&gt;&lt;p&gt;We received a critical incident report from Project X on the Production environment. The CPU of the Database (i.e. &lt;a href=&quot;https://www.couchbase.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Couchbase&lt;/a&gt;, more specifically, a bucket called members) increased drastically and reached 100%, and the system became unavailable for a few hours.&lt;/p&gt;
&lt;p&gt;The lucky thing was that the system was restored after the traffic spike ceased, but the sad thing was …&lt;/p&gt;
&lt;p&gt;We didn’t know where the traffic was from and why it caused intensive CPU usage on Database, so the symptom may happen again in future.&lt;/p&gt;
    
    </summary>
    
    
      <category term="performance database" scheme="http://yoursite.com/tags/performance-database/"/>
    
  </entry>
  
  <entry>
    <title>Algebraic Data Types in TypeScript</title>
    <link href="http://yoursite.com/2023/02/18/ADT-in-TS/"/>
    <id>http://yoursite.com/2023/02/18/ADT-in-TS/</id>
    <published>2023-02-18T03:18:54.000Z</published>
    <updated>2023-02-18T14:37:53.495Z</updated>
    
    <content type="html"><![CDATA[<p>So, what’s algebraic data type?</p><blockquote><p>In computer programming, especially functional programming and type theory, an algebraic data type (ADT) is a kind of composite type, i.e., a type formed by combining other types.</p></blockquote><p>No worries if you have a hard time to understand the definition above, we start with storytelling.</p><a id="more"></a><h1 id="A-login-function"><a href="#A-login-function" class="headerlink" title="A login function"></a>A login function</h1><p>One day, you, as a programmer(more specifically, a TypeScript developer), got a task from your manager, you need to build a function(or API in another word) that allows user to login to the system with username and password. “That’s just a piece of cake.”, you thought and built the login function like this,</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Credentials = &#123;</span><br><span class="line">  username: <span class="built_in">string</span>;</span><br><span class="line">  password: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">c: Credentials</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doLogin(c.username, c.password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The next day, your manager came back to you, “well, we need to support login with email together with password as well”. Easy, easy, you eneded up with the following code with a little extension.</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Credentials = &#123;</span><br><span class="line">  username?: <span class="built_in">string</span>;</span><br><span class="line">  password: <span class="built_in">string</span>;</span><br><span class="line">  email?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">c: Credentials</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// validation</span></span><br><span class="line">  <span class="keyword">if</span> (c.username &amp;&amp; c.email</span><br><span class="line">    || !c.username &amp;&amp; !c.email) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'validation error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (c.username) &#123;</span><br><span class="line">    <span class="keyword">return</span> loginByName(c.username, c.password);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (credential.email) &#123;</span><br><span class="line">    <span class="keyword">return</span> loginByEmail(c.email, c.password);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This time, you marked the username and email as optional fields, carefully added the validation, and splitted the login process into two small functions, everything seems to be perfect!</p><p>As you know, change is the only constant, a few days later, your manager told you, “Our system needs to support login with one-time-passcode(OTP) as it mitigates the weak password problem.”.</p><p>Okay, adding a <code>otp</code> to <code>Crendential</code> is trivial but now every field is optional, you probabbly also consider to add a Enum type to the Credentials so you can use switch-case to reduce the <code>if-else</code> clausese.<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> LoginType &#123;</span><br><span class="line">  USERNAME = <span class="string">'username'</span>,</span><br><span class="line">  EMAIL = <span class="string">'email'</span>,</span><br><span class="line">  OTP = <span class="string">'otp'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Credentials = &#123;</span><br><span class="line">  <span class="keyword">type</span>: LoginType; </span><br><span class="line">  username?: <span class="built_in">string</span>;</span><br><span class="line">  password?: <span class="built_in">string</span>;</span><br><span class="line">  email?: <span class="built_in">string</span>;</span><br><span class="line">  otp? : <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">c: Credentials</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// TODO validation, how?</span></span><br><span class="line">  <span class="keyword">switch</span> (c.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> LoginType.USERNAME:</span><br><span class="line">        <span class="keyword">return</span> loginByName(c.username, c.password);</span><br><span class="line">      <span class="keyword">case</span> LoginType.EMAIL:</span><br><span class="line">        <span class="keyword">return</span> loginByEmail(c.email, c.password);</span><br><span class="line">      <span class="keyword">case</span> LoginType.OTP:</span><br><span class="line">        <span class="keyword">return</span> loginByOTP(c.otp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>No bad, but how to do the validation, there are so many possibilities as most of fields are optional, you definitely don’t allow the api to be feed with both <code>otp</code> and <code>username</code> at the same time for example.<br>Probably you have realized that there is something wrong, you’re right, actually the way that expands the <code>Credentials</code> is so called building a <strong>product type</strong>.</p><h1 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h1><p>As aforementioned, a product is a composition of types, it’s normally annotated as <code>*</code>(<em>asterisk</em>), so <code>C = A * B</code> means C is the product of A and B. Let me give an example, let’s say A is type Bool, B is a type with 3 elements, [1,2,3], you got C as a set of tuples.</p><table><thead><tr><th>A/B</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>True</td><td>(True, 1)</td><td>(True, 2)</td><td>(True, 3)</td></tr><tr><td>False</td><td>(False, 1)</td><td>(False, 2)</td><td>(False, 3)</td></tr></tbody></table><p>Notice there is an important property, </p><blockquote><p>the cardinality of the product is the product of cardinalities.<br><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">Cardi(<span class="name">A</span> * B)  = Cardi(A) * Cardi(<span class="name">B</span>)</span><br></pre></td></tr></table></figure></p></blockquote><p>Given our login case above and simplify the cardinalities of optional fields to 2: exist(X)/non-exist(-).</p><table><thead><tr><th>Type</th><th>username</th><th>password</th><th>email</th><th>otp</th></tr></thead><tbody><tr><td>EMAIL</td><td>-</td><td>X</td><td>X</td><td>-</td></tr><tr><td>USERNAME</td><td>X</td><td>X</td><td>-</td><td>-</td></tr><tr><td>OTP</td><td>-</td><td>-</td><td>-</td><td>X</td></tr></tbody></table><p>You can see from all the combinations we only want to handle those cells with <code>X</code>, this reminder me another concept: <strong>total function</strong>. A total function is defined for all inputs of the right type, i.e. for all of a domain. E.g.  <code>(x: Int) =&gt; { return x + 1 }</code> is a total function as it accepts all integers, but <code>(x: Int) =&gt; { return 1 / x }</code> is not as it fails to map to a result with zero on the set of real numbers.</p><p>We now see as we used the wrong type(Product) for the argument of login function, it’s disqualified as a total function, which leads to tricky validation handlings.</p><h1 id="Sum"><a href="#Sum" class="headerlink" title="Sum"></a>Sum</h1><p>A better way to define the argument type of login is using Sum type. Sum is the dual of Product, it’s used to hold a value that could take on several different, but fixed types. In TypeScript it’s named tagged union types.<br>Accordingly there is also a quality property for Sum type,</p><blockquote><p>the cardinality of the sum is the sum of cardinalities</p></blockquote><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">Cardi(<span class="name">A</span> + B) = Cardi(<span class="name">A</span>) + Cardi(<span class="name">B</span>)</span><br></pre></td></tr></table></figure><h1 id="Improvement-with-Sum-type"><a href="#Improvement-with-Sum-type" class="headerlink" title="Improvement with Sum type"></a>Improvement with Sum type</h1><p>Let’s rewrite the Credentials type with Sum type as follows,</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Email = &#123;</span><br><span class="line">  <span class="keyword">type</span>: LoginType.EMAIL;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">  password: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> UserName = &#123;</span><br><span class="line">  <span class="keyword">type</span>: LoginType.USERNAME;</span><br><span class="line">  username: <span class="built_in">string</span>;</span><br><span class="line">  password: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> OTP = &#123;</span><br><span class="line">  <span class="keyword">type</span>: LoginType.OTP;</span><br><span class="line">  otp: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Credentials = Email | UserName | OTP</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">c: Credentials</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (c.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> LoginType.USERNAME:</span><br><span class="line">        <span class="keyword">return</span> loginByName(c.username, c.password);</span><br><span class="line">      <span class="keyword">case</span> LoginType.EMAIL:</span><br><span class="line">        <span class="keyword">return</span> loginByEmail(c.email, c.password);</span><br><span class="line">      <span class="keyword">case</span> LoginType.OTP:</span><br><span class="line">        <span class="keyword">return</span> loginByOTP(c.otp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You see now you don’t need extra validation as type checking prevents any malformed data as input.<br>if you call <code>login</code> with <code>{ type: LoginType.EMAIL, otp: &#39;xxx&#39;, email: &#39;foo@bar.com&#39;, password: &#39;xxx&#39;}</code>, you will get a compiler error like this:</p><blockquote><p>error TS2345: Argument of type ‘{ type: LoginType.EMAIL; otp: string; email: string; password: string; }’ is not assignable to parameter of type ‘Credentials’.<br> Object literal may only specify known properties, and ‘otp’ does not exist in type ‘Email’.</p></blockquote><h1 id="When-should-I-use-which"><a href="#When-should-I-use-which" class="headerlink" title="When should I use which"></a>When should I use which</h1><p>Both Sum and Product are the composition of types. If you see the types as the components are independent, then Product is a fit. e.g. <code>type Calender = [Year, Month, Date]</code>, if you see the components are dependent when implementing as a Product, Sum will be a better choice. </p><h1 id="Further-improvement-with-functional-style"><a href="#Further-improvement-with-functional-style" class="headerlink" title="Further improvement with functional style"></a>Further improvement with functional style</h1><p>One thing I’d like to improve for the <code>login</code> function is that there is switch-case inside, it’s usually used for control flow distribution but there is not a really one, it was misused to map the type to the handlers.<br>It can be revamped with a data driven pattern.</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginByEmail</span>(<span class="params">c: Email</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginByName</span>(<span class="params">c: UserName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginByOTP</span>(<span class="params">c: OTP</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> handlers = &#123;</span><br><span class="line">  [LoginType.EMAIL]: loginByEmail,</span><br><span class="line">  [LoginType.USERNAME]: loginByName ,</span><br><span class="line">  [LoginType.OTP]: loginByOTP,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">c: Credentials</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> handlers[c.type](c); <span class="comment">// compile error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pretty concise and easy to extend with other handlers but there is a compiler error, oops,</p><blockquote><p>Argument of type ‘Credentials’ is not assignable to parameter of type ‘never’.<br> The intersection ‘Email &amp; UserName &amp; OTP’ was reduced to ‘never’ because property ‘type’ has conflicting types in some constituents.<br>   Type ‘Email’ is not assignable to type ‘never’.</p></blockquote><p>You might be curious why there is an intersection, this is because TypeScript type inference uses intersection instead of union when inferring an argument for serveral functions. see details <a href="https://stackoverflow.com/a/54936519/4550665" target="_blank" rel="noopener">here</a>.</p><p>A quick fix is just adding explicit type for the functions,<br><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handlers = &#123;</span><br><span class="line">  [<span class="meta">LoginType.EMAIL</span>]: <span class="function">loginByEmail <span class="title">as</span> (<span class="params">c: Credentials</span>)</span> =&gt; <span class="keyword">string</span>,</span><br><span class="line">  [<span class="meta">LoginType.USERNAME</span>]: <span class="function">loginByName <span class="title">as</span> (<span class="params">c: Credentials</span>)</span> =&gt; <span class="keyword">string</span>,</span><br><span class="line">  [<span class="meta">LoginType.OTP</span>]: <span class="function">loginByOTP <span class="title">as</span> (<span class="params">c: Credentials</span>)</span> =&gt; <span class="keyword">string</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>The Product type and Sum type are two common classes of algebraic types, understanding them and select the correct one would greatly affect the design of system modeling.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So, what’s algebraic data type?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer programming, especially functional programming and type theory, an algebraic data type (ADT) is a kind of composite type, i.e., a type formed by combining other types.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No worries if you have a hard time to understand the definition above, we start with storytelling.&lt;/p&gt;
    
    </summary>
    
    
      <category term="functional programming" scheme="http://yoursite.com/tags/functional-programming/"/>
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
      <category term="ADT" scheme="http://yoursite.com/tags/ADT/"/>
    
  </entry>
  
  <entry>
    <title>Less is more when it comes to code</title>
    <link href="http://yoursite.com/2022/10/30/less-is-more/"/>
    <id>http://yoursite.com/2022/10/30/less-is-more/</id>
    <published>2022-10-30T14:57:24.000Z</published>
    <updated>2023-02-18T14:21:30.010Z</updated>
    
    <content type="html"><![CDATA[<p>I have been learning Haskell for a while, it’s one of the famous functional programming languages. When I practiced with some exercises, I found an interesting thing that the <a href="https://www.seas.upenn.edu/~cis1940/spring13/hw/03-rec-poly.pdf" target="_blank" rel="noopener">Excercise here</a> requires you to write the code as little as possible.</p><p>Well, it is not necessary to pursue the most minimalistic line of code in most cases, but in general, a smaller code base is easier to understand and maintain over time.</p><p>Then I was curious how shorter I could get it done with … Haskell.</p><a id="more"></a><h2 id="Description-of-problem"><a href="#Description-of-problem" class="headerlink" title="Description of problem"></a>Description of problem</h2><p>Given a list with numbers from 0 to 9(inclusive), generate a vertical histogram to stdout displaying how many of each number were in the list. e.g.</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">given</span>:  [1,4,5,4,6,6,3,4,2,4,9]</span><br><span class="line"></span><br><span class="line"><span class="attribute">display:</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    * *</span><br><span class="line"> ******  *</span><br><span class="line">==========</span><br><span class="line"><span class="attribute">0123456789</span></span><br></pre></td></tr></table></figure><h2 id="Before-getting-your-hands-dirty"><a href="#Before-getting-your-hands-dirty" class="headerlink" title="Before getting your hands dirty"></a>Before getting your hands dirty</h2><p>The problem as mentioned above doesn’t seem to be so difficult at first glance, it’s all about counting the times of showing up in the list and rendering the result with ASCII character(asterisk).<br>Essentially I broke it into two sub-problems,</p><ol><li>count the times of the number </li><li>display a vertical histogram</li></ol><p>I also had the plan to not only address it with Haskell but also find a solution with an imperative paradigm(that would be JavaScript as it’s one of my most familiar language). It would be a typical <code>declarative vs imperative</code> comparison, then.</p><h2 id="Imperative-paradigm-JavaScript-version"><a href="#Imperative-paradigm-JavaScript-version" class="headerlink" title="Imperative paradigm(JavaScript version)"></a>Imperative paradigm(JavaScript version)</h2><p>It’s relatively straightforward; the first loop gathers the times of appearance for each number in a hash.<br>The keys of the hash are the numbers from 0 to 9 and the values are the corresponding appeared times.</p><p>The rendering part is a bit tricky as I have to draw the diagram up-down because it’s stdout output. To know how many rows I have to draw, I used the <code>max</code> to get the number of rows from the values of hash.<br>The inner <code>for loop</code> (with <code>k</code> as its variable) prints 10 characters for 0~9, either asterisk or blank depending on if the value in the hash exceeds the position of current row.</p><p><em>Side Note:</em> As the <code>console.log</code> brings a newline for each output, I have to build a <code>print</code> that prints a character without a newline.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">histogram</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> cur = arr[i];</span><br><span class="line">    hash[cur] = (hash[cur] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(hash);</span></span><br><span class="line">  <span class="comment">//   output: &#123; '1': 1, '2': 1, '3': 1, '4': 4, '5': 1, '6': 2, '9': 1 &#125;</span></span><br><span class="line">  <span class="keyword">const</span> rows = <span class="built_in">Math</span>.max(...Object.values(hash));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = rows; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">      print(hash[k] &gt;= j ? <span class="string">'*'</span> : <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">'\n'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'=========='</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'0123456789'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  process.stdout.write(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">histogram([<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>]);</span><br></pre></td></tr></table></figure><h2 id="Declarative-paradigm-Haskell-version"><a href="#Declarative-paradigm-Haskell-version" class="headerlink" title="Declarative paradigm(Haskell version)"></a>Declarative paradigm(Haskell version)</h2><p>I think if the question asks for a horizontal histogram, it would be much easier as each line in the stdout represents the quantity for a number. That inspiration just reminds me that a histogram is actually a 2-D matrix and if I could flip it…<br>That’s called <a href="https://en.wikipedia.org/wiki/Transpose" target="_blank" rel="noopener">transpose</a> actually in linear algebra; Haskell happens to have that built-in function!<br>Buckle up and let me elaborate on the solution.</p><p>Let us fiddle with a similar but simplified example first, e.g., a list from 1 ~ 3: <code>[1, 2, 2, 3, 3, 2]</code>,<br>To get the matrix (1) eventually, we can try to build (2) first, don’t worry about the <code>_</code>; it’s just a  representation of a blank in the matrix for better visibility.</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)</span><br><span class="line">_ * _</span><br><span class="line">_ * *</span><br><span class="line">* * *</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span> * _ _     [ [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">2</span> * * *       [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">3</span> * * _       [<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>] ]</span><br></pre></td></tr></table></figure><p>If we replace the asterisks with the corresponding nubmers, (2) would be a two-dimension list <code>[[1, 0, 0], [2, 2, 2], [3, 3, 0]]</code>, so if you know about Haskell, the conversion from the original list to the 2-dimension list needs a function with a signature of <code>[a] -&gt; [[a]]</code>,<br>that … could be done with a <code>map</code>.<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">map f [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>Where is the list <code>[1, 2, 3]</code> from? It is the left side label in diagram (2) that could be exacted with a <code>unique</code> or <code>dedup</code> function from the source list; in Hanskell it has such a function called <code>nub</code>.</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">nub</span> ['a', 'a', 'b', 'c', 'b']</span><br><span class="line"><span class="comment">-- output: ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>Then what should be the <code>f</code> like?<br>To get the target matrix <code>[[1, 0, 0], [2, 2, 2], [3, 3, 0]]</code>, we actually can ignore the zero in the inner list, so the result we try to get is just <code>[[1], [2,2,2], [3,3]]</code>, you probably have realized it is… just a grouping with same numbers, we can use <code>filter</code> to achieve it.</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">matrix</span> x = map (\n -&gt; filter (== n) x) $ nub x</span><br></pre></td></tr></table></figure><p>So now we have a list <code>[[1], [2,2,2], [3,3]]</code> that represents the matrix (2), let’s use <code>transpose</code> to flip it to:<br><code>[[1,2,3], [2,3], [2]]</code>; if you have confusions about this step, you can revisit the <a href="https://en.wikipedia.org/wiki/Transpose" target="_blank" rel="noopener">awesome animation here</a>.<br>Check the transposed list; it’s exactly what we are looking for to guide us in drawing the asterisk!<br><img src="https://user-images.githubusercontent.com/2748884/199040330-71c21c00-9c70-42b7-aa35-04f0772f7b37.png" alt="img"></p><p>Bear in mind we have to draw the rows top-down, so a reverse of the list is needed.<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">matrix</span> x = map (\n -&gt; filter (== n) x) $ nub x</span><br><span class="line"><span class="title">matrix_to_draw</span> x = reverse . transpose $ matrix x</span><br></pre></td></tr></table></figure></p><p>The final step, we need a <code>drawRow</code> function that ingests a list and produces a line of asterisk interpolated with blank correspondingly.<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title">drawRow</span> s = map (\n -&gt; <span class="keyword">if</span> n `elem` s <span class="keyword">then</span> '*' <span class="keyword">else</span> ' ') [<span class="number">0</span> .. <span class="number">9</span>]</span><br></pre></td></tr></table></figure></p><p><img src="https://user-images.githubusercontent.com/2748884/199044570-f0b01b34-0143-4d5d-baf6-5967fe19c999.png" alt="img"></p><p>The remaining stuff is just <code>unlines</code> the list into a string and calls <code>putStr</code> to display it.<br>Actually, I can merge the following 3 functions into one line of code, but for the sake of readability I still prefer to have small functions with meaningful names.<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- final code </span></span><br><span class="line"><span class="title">matrix</span> x = map (\n -&gt; filter (== n) x) $ nub x</span><br><span class="line"><span class="title">drawRow</span> s = map (\n -&gt; <span class="keyword">if</span> n `elem` s <span class="keyword">then</span> '*' <span class="keyword">else</span> ' ') [<span class="number">0</span> .. <span class="number">9</span>]</span><br><span class="line"><span class="title">histogram</span> x =</span><br><span class="line">  putStr</span><br><span class="line">    $  (unlines . (map drawRow) . reverse . transpose $ matrix x)</span><br><span class="line">    ++ <span class="string">"==========\n0123456789\n"</span></span><br></pre></td></tr></table></figure></p><h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h2><p>Comparing the JavaScript version that is in an imperative style, we see how concise the functional programming language can be, and it’s also more readable if you give the proper names to the functions.</p><p>Moreover, less is more can be considered from two other aspects,</p><ul><li>Less code is easier to read and more robust as there is less room for errors.</li><li>Less code makes you think more about abstraction and reuse.</li></ul><p><em>Disclaimer</em>: This is not about the battle of languages, I’m not saying Haskell is better than any other language; in fact, JavaScript is able to write in a functional way with some help from libraries.<br>If you prefer reading or using JavaScript, here is the translated final code with Ramda package.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrix</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> R.map(<span class="function">(<span class="params">n</span>) =&gt;</span> R.filter(R.identical(n), arr), R.uniq(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawRow</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr0to9 = R.times(R.identity, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> R.join(</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    R.map(<span class="function">(<span class="params">x</span>) =&gt;</span> (R.includes(x, list) ? <span class="string">'*'</span> : <span class="string">' '</span>), arr0to9)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">histogram</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> r = R.compose(R.reverse, R.transpose)(matrix(arr));</span><br><span class="line">  <span class="comment">// console.log(r);</span></span><br><span class="line">  R.map(<span class="built_in">console</span>.log, R.map(drawRow, r));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'=========='</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'0123456789'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">histogram(arr);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been learning Haskell for a while, it’s one of the famous functional programming languages. When I practiced with some exercises, I found an interesting thing that the &lt;a href=&quot;https://www.seas.upenn.edu/~cis1940/spring13/hw/03-rec-poly.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Excercise here&lt;/a&gt; requires you to write the code as little as possible.&lt;/p&gt;
&lt;p&gt;Well, it is not necessary to pursue the most minimalistic line of code in most cases, but in general, a smaller code base is easier to understand and maintain over time.&lt;/p&gt;
&lt;p&gt;Then I was curious how shorter I could get it done with … Haskell.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Send HTTP requests with netcat</title>
    <link href="http://yoursite.com/2021/11/15/curl-alternative/"/>
    <id>http://yoursite.com/2021/11/15/curl-alternative/</id>
    <published>2021-11-15T09:28:18.000Z</published>
    <updated>2021-11-15T12:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Occasionally I need to call HTTP API from a bare-bones environment, where we don’t have <code>curl</code> or <code>wget</code>. Nowadays, it’s so common that we run everything in the dockerized environment, and we are apt to use a slim docker image without many utility libraries.</p><a id="more"></a><p>Of course, you would say installing the <code>curl</code> is the most straightforward solution here. Still, unfortunately, we don’t always have the privilege to install packages in a built container, so we need an alternative to make the HTTP request; here comes the <code>netcat</code> command, it’s usually pre-installed in Linix based system out-of-box.</p><p>Before I try to use <code>netcat</code> to send the HTTP request, I need APIs to be called. I use <a href="https://github.com/namshi/mockserver" target="_blank" rel="noopener">https://github.com/namshi/mockserver</a> to create two simple APIs(one GET and one POST)</p><p>Response definition of <code>mocks/foo/GET.mock</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json; charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   "Random": "content"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Response definition of <code>mocks/foo/POST.mock</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: text/xml; charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   "Accept-Language": "en-US,en;q=0.8",</span><br><span class="line">   "Host": "headers.jsontest.com",</span><br><span class="line">   "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.3",</span><br><span class="line">   "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can run <code>mockserver -p 8080 -m mocks</code> so you have two APIS available for testing.</p><h2 id="use-nc-to-send-HTTP-GET-request"><a href="#use-nc-to-send-HTTP-GET-request" class="headerlink" title="use nc to send HTTP GET request"></a>use nc to send HTTP GET request</h2><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">printf 'GET /foo HTTP/1.0<span class="symbol">\r</span><span class="symbol">\n</span>Host:localhost<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>' | nc  -v localhost 8080</span><br></pre></td></tr></table></figure><p><strong>Caveat</strong>: you have to specify the <code>Host</code> as it’s mandaory according to the HTTP protocol.<br>You will see the response is printed as the stdout.</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Connection <span class="keyword">to</span> localhost<span class="built_in"> port </span>8080 [tcp/http-alt] succeeded!</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json; <span class="attribute">charset</span>=utf-8</span><br><span class="line">Date: Mon, 15 Nov 2021 09:47:02 GMT</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"Random"</span>: <span class="string">"content"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="use-nc-to-send-HTTP-POST-request"><a href="#use-nc-to-send-HTTP-POST-request" class="headerlink" title="use nc to send HTTP POST request"></a>use nc to send HTTP POST request</h2><p>POST needs more work as you have to orchestrate the body and related headers, so I ended up with a bash script.</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">BODY="&#123; <span class="symbol">\"</span>bar<span class="symbol">\"</span> : <span class="symbol">\"</span>Hello<span class="symbol">\"</span>, <span class="symbol">\"</span>baz<span class="symbol">\"</span> : <span class="symbol">\"</span>11111<span class="symbol">\"</span>&#125;"</span><br><span class="line"></span><br><span class="line">echo -ne "POST /foo HTTP/1.0<span class="symbol">\r</span><span class="symbol">\n</span>Host: localhost<span class="symbol">\r</span><span class="symbol">\n</span>Content-Type: application/json<span class="symbol">\r</span><span class="symbol">\n</span>Content-Length: $&#123;#BODY&#125;<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>$&#123;BODY&#125;" | nc -i 3 localhost 8080</span><br></pre></td></tr></table></figure><p>That’s pretty much it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Occasionally I need to call HTTP API from a bare-bones environment, where we don’t have &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;. Nowadays, it’s so common that we run everything in the dockerized environment, and we are apt to use a slim docker image without many utility libraries.&lt;/p&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Bring Emacs to the foreground on macOS Catalina</title>
    <link href="http://yoursite.com/2020/06/20/emacs-on-macox-catalina/"/>
    <id>http://yoursite.com/2020/06/20/emacs-on-macox-catalina/</id>
    <published>2020-06-20T06:07:16.000Z</published>
    <updated>2020-06-20T12:26:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been using Emacs for a few months, I always keep one instance and use a global shortcut key <code>cmd  + e</code> to open or switch it to the foreground.<br>I did it with <a href="https://karabiner-elements.pqrs.org/" target="_blank" rel="noopener">Karabiner-Element</a> key mapping<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"from"</span>: &#123;</span><br><span class="line">        <span class="attr">"key_code"</span>: <span class="string">"e"</span>,</span><br><span class="line">        <span class="attr">"modifiers"</span>: &#123;</span><br><span class="line">            <span class="attr">"mandatory"</span>: [</span><br><span class="line">                <span class="string">"right_command"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"to"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"shell_command"</span>: <span class="string">"open -a 'emacs'"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"basic"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Recently I upgraded the macOS to Catalina and found the <code>open -a emacs</code> can not bring it to foreground anymore. I spent hours searching with google until I found this post(<a href="https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/)" target="_blank" rel="noopener">https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/)</a>.</p><a id="more"></a>  <p>As explained in the post, I never noticed the binary in Emacs.app is actually a ruby script which was working before Catalina, but now the OS fails to bring it to the front as the binary doesn’t match the ruby script.</p><p>I tried the workaround mentioned in the <a href="https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/" target="_blank" rel="noopener">post</a> above and figured out I need to use Emacs-x86_64-10_10 instead.<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> /Applications/Emacs.app/Contents/MacOS_</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> mv Emacs Emacs-launcher</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> mv Emacs-x86_64-10_10 Emacs</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> /Applications/Emacs.app/Contents/</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> rm -rf _CodeSignature</span></span><br></pre></td></tr></table></figure></p><p>However, I still get some dependencies errors after the renaming,<br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">Warning: <span class="keyword">arch</span>-dependent data <span class="keyword">dir</span> '/Users/build/workspace/Emacs-Multi-Build/<span class="keyword">label</span>/mavericks/emacs-source/nextstep/Emacs.<span class="keyword">app</span>/Contents/MacOS/libexec/': <span class="keyword">No</span> such <span class="keyword">file</span> or directory</span><br><span class="line">Warning: <span class="keyword">arch</span>-independent data <span class="keyword">dir</span> '/Users/build/workspace/Emacs-Multi-Build/<span class="keyword">label</span>/mavericks/emacs-source/nextstep/Emacs.<span class="keyword">app</span>/Contents/Resources/etc/': <span class="keyword">No</span> such <span class="keyword">file</span> or directory</span><br><span class="line">Warning: Lisp directory '/Users/build/workspace/Emacs-Multi-Build/<span class="keyword">label</span>/mavericks/emacs-source/nextstep/Emacs.<span class="keyword">app</span>/Contents/Resources/lisp': <span class="keyword">No</span> such <span class="keyword">file</span> or directory</span><br><span class="line"><span class="keyword">Error</span>: charsets directory not found:</span><br><span class="line">/Users/build/workspace/Emacs-Multi-Build/<span class="keyword">label</span>/mavericks/emacs-source/nextstep/Emacs.<span class="keyword">app</span>/Contents/Resources/etc/charsets</span><br><span class="line">Emacs will not function correctly without the character map files.</span><br><span class="line">Please check your installation!</span><br></pre></td></tr></table></figure></p><p>After another round of searching, I ended up with a solution according to the suggestion here: <a href="https://github.com/caldwell/build-emacs/issues/57" target="_blank" rel="noopener">https://github.com/caldwell/build-emacs/issues/57</a>.<br>I put the following alias to my zshrc and everything returns to normal as before.</p><p><code>alias emacs=/Application/Emacs.app/Contents/MacOS/Emacs</code></p><p>Hopefully, this post would also help anybody who is suffering the same wacky issue as me.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been using Emacs for a few months, I always keep one instance and use a global shortcut key &lt;code&gt;cmd  + e&lt;/code&gt; to open or switch it to the foreground.&lt;br&gt;I did it with &lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Karabiner-Element&lt;/a&gt; key mapping&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;from&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;key_code&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;modifiers&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;mandatory&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;right_command&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;to&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;shell_command&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;open -a &#39;emacs&#39;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Recently I upgraded the macOS to Catalina and found the &lt;code&gt;open -a emacs&lt;/code&gt; can not bring it to foreground anymore. I spent hours searching with google until I found this post(&lt;a href=&quot;https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/)&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>When ramdajs meets Promise</title>
    <link href="http://yoursite.com/2020/04/25/ramda-promise/"/>
    <id>http://yoursite.com/2020/04/25/ramda-promise/</id>
    <published>2020-04-25T12:08:23.000Z</published>
    <updated>2020-04-27T15:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge<a id="sec-1"></a></h1><p>I use <a href="https://ramdajs.com/" target="_blank" rel="noopener">ramdajs</a> a lot as I like its conciseness and functional style, but recently I met a challenge with it with Promise. The scenario is deadly simple, I need to fetch some records from the DB and do some transformation and save them back.</p><p>Quite straightforward to use ramda for data transformation, isn’t it?</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>]</span><br><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> DB.getByIDs(ids)</span><br><span class="line"><span class="keyword">const</span> updated = R.map(<span class="function"><span class="params">record</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transfromed = transform(record)</span><br><span class="line">  <span class="keyword">return</span> DB.update(transfromed) <span class="comment">// ops, update returns a Promise</span></span><br><span class="line">&#125; , records)</span><br></pre></td></tr></table></figure><a id="more"></a>  <p>Here the problem is that the updating is asynchronous operation, and I do need to wait for its result. so <code>async</code> is needed in the map function, then now R.map returns an array of Promise. So I have to use <code>Promise.all</code> to get the results of them.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>]</span><br><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> DB.getByIDs(ids)</span><br><span class="line"><span class="keyword">const</span> updated = <span class="built_in">Promise</span>.all(R.map(<span class="keyword">async</span> record =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> transfromed = transform(record)</span><br><span class="line">  <span class="keyword">return</span> DB.update(transfromed)</span><br><span class="line">&#125; , records))</span><br></pre></td></tr></table></figure><h1 id="So-it-doesn’t-look-like-a-challenge"><a href="#So-it-doesn’t-look-like-a-challenge" class="headerlink" title="So it doesn’t look like a challenge"></a>So it doesn’t look like a challenge<a id="sec-2"></a></h1><p>Exactly, the code snippet above doesn’t seem to be problematic, but What I faced is that the <code>ids</code> was not an array of 3 items, it will be thousands or ten thousands IDs. So what? you might ask, I’m going to tell you I won’t run this code against my DB as one of cons for Promise is that you have no control when it starts, i.e. Promise.all will issue 10K write operation hamming the DB at the same time.</p><p>One of approaches to solve it is to use <a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="noopener">bluebird</a>, it’s a cool library and I do use it a lot, it provides a fine-grained control about Promise, you can use <a href="http://bluebirdjs.com/docs/api/promise.map.html" target="_blank" rel="noopener">map</a> with a <code>concurrency</code> to control the throughput of the executing Promises.</p><h1 id="This-is-a-tiny-script-I-don’t-want-to-import-bluebird"><a href="#This-is-a-tiny-script-I-don’t-want-to-import-bluebird" class="headerlink" title="This is a tiny script, I don’t want to import bluebird"></a>This is a tiny script, I don’t want to import bluebird<a id="sec-3"></a></h1><p>There should be another way, all I want is to make the Promise to be sequentially composed, why not use <code>for</code>?</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>]</span><br><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> DB.getByIDs(ids)</span><br><span class="line"><span class="keyword">const</span> updated = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; records.length ; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> transfromed = transform(record)</span><br><span class="line">  updated.push(<span class="keyword">await</span> DB.update(transfromed))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It works but I really don’t like it, it’s a more imperative coding style than functional way and it’s slow as the Promises run one by one.</p><h1 id="Back-to-use-ramdajs"><a href="#Back-to-use-ramdajs" class="headerlink" title="Back to use ramdajs"></a>Back to use ramdajs<a id="sec-4"></a></h1><p>I recall there is a <code>pipeP</code> function from ramda but now it’s deprecated and replaced with <code>pipeWith</code>. Indeed piping is a good way to do things in sequential, only thing makes me uncomfortable is that it needs to be fed with functions, but I have a bunch of data instead of functions, but there is a way.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>]</span><br><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> DB.getByIDs(ids)</span><br><span class="line"><span class="keyword">const</span> funcs = R.map(<span class="function">(<span class="params">record</span>) =&gt;</span> <span class="keyword">async</span>(acc) =&gt; &#123;</span><br><span class="line">  acc = R.defaultTo([])(acc)</span><br><span class="line">  <span class="keyword">return</span> acc.push(<span class="keyword">await</span> DB.update(tranform(record)))</span><br><span class="line">&#125;)(records)</span><br><span class="line"><span class="keyword">const</span> updated = R.pipeWith(R.then)(funcs)()</span><br></pre></td></tr></table></figure><p>Here the point is to build a bunch of functions and use R.then to run one after the previous one resolves. And as I still need the result of all updated I need a <code>accumulation</code> passing through the pipe functions. However, I’m not sure if pipeWith works with thousands of functions and &#x2026; the `accumulation` reminds me the <code>reduce</code> should work as well.</p><h1 id="Reduce-version"><a href="#Reduce-version" class="headerlink" title="Reduce version"></a>Reduce version<a id="sec-5"></a></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>]</span><br><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> DB.getByIDs(ids)</span><br><span class="line"><span class="keyword">const</span> rf = <span class="keyword">async</span> (acc, item) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> resloved = <span class="keyword">await</span> acc</span><br><span class="line">  <span class="keyword">return</span> resolved.push(<span class="keyword">await</span> DB.update(tranform(item)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> updated = <span class="keyword">await</span> R.reduce(rf, [], records)</span><br></pre></td></tr></table></figure><p>Each step returns a promise, to reduce the promises, you can see <code>await</code> are applied to both acc and item transformation. Also bear in mind don’t let DB.update run before <code>await acc</code>.</p><h1 id="Transducer-version"><a href="#Transducer-version" class="headerlink" title="Transducer version"></a>Transducer version<a id="sec-6"></a></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>]</span><br><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> DB.getByIDs(ids)</span><br><span class="line"><span class="keyword">const</span> rf = <span class="keyword">async</span> (acc, item) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> resolved = <span class="keyword">await</span> acc</span><br><span class="line">  <span class="keyword">return</span> resolved.push(<span class="keyword">await</span> item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> updated = <span class="keyword">await</span> R.transduce(R.map(R.pipe(tranform, DB.update)), rf, [], records)</span><br></pre></td></tr></table></figure><p>Of course you could use transducer as well.</p><h1 id="Speed-it-up"><a href="#Speed-it-up" class="headerlink" title="Speed it up"></a>Speed it up<a id="sec-7"></a></h1><p>If you are not satisfy with running Promise one by one, you could still use a bit <code>Prmose.all</code> to run by batch.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = [<span class="string">'1'</span>, <span class="string">'2'</span>, ... , <span class="string">'999'</span>]</span><br><span class="line"><span class="keyword">const</span> partitions = R.splitEvery(<span class="number">20</span>)(ids);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rf = <span class="keyword">async</span> (acc, item) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> resolved = <span class="keyword">await</span> acc</span><br><span class="line">  <span class="keyword">const</span> current = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(R.map(<span class="keyword">async</span> item =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> DB.update(tranform(item));</span><br><span class="line">  &#125;)(<span class="keyword">await</span> DB.getByIDs(ids)));</span><br><span class="line">  <span class="keyword">return</span> resolved.push(current)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> updated = R.flatten(<span class="keyword">await</span> R.reduce(rf, [], partitions))</span><br></pre></td></tr></table></figure><p>That is all, Promise is not a pure but as you see there are still a few ways to combine it with functional ways.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Challenge&quot;&gt;&lt;a href=&quot;#Challenge&quot; class=&quot;headerlink&quot; title=&quot;Challenge&quot;&gt;&lt;/a&gt;Challenge&lt;a id=&quot;sec-1&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;I use &lt;a href=&quot;https://ramdajs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ramdajs&lt;/a&gt; a lot as I like its conciseness and functional style, but recently I met a challenge with it with Promise. The scenario is deadly simple, I need to fetch some records from the DB and do some transformation and save them back.&lt;/p&gt;
&lt;p&gt;Quite straightforward to use ramda for data transformation, isn’t it?&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ids = [&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;456&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;789&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; records = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; DB.getByIDs(ids)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; updated = R.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;record&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; transfromed = transform(record)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DB.update(transfromed) &lt;span class=&quot;comment&quot;&gt;// ops, update returns a Promise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; , records)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis Sentinel Docker</title>
    <link href="http://yoursite.com/2019/03/06/docker-redis-sentinel/"/>
    <id>http://yoursite.com/2019/03/06/docker-redis-sentinel/</id>
    <published>2019-03-05T16:23:08.000Z</published>
    <updated>2019-03-08T16:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.airbusdefenceandspacenetherlands.nl/dsstuff/uploads/2014/10/Sentinel-1-ESA.jpg" alt=""></p><p>I am a big fan of TDD, and I use docker a lot to build the dependencies(APIs, Database, etc.) for the unit test in my local development environment and CI. Everything goes well until one day our lovely DevOps guys asked me to use <a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">Redis sentinel</a> which provides high availability, it’s a good practice, and I like the automatic failover capability. Since we always try to align the test environment to the production one, even for the local development environment, so I plan to build the Redis sentinel with docker.</p><h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><p>Redis Sentinel is a typical distributed architecture, the significant difference of using sentinel is that you should ask “redis-sentinel” for “redis-master” first, then issue redis command to the “redis-master” sentinel told you.<br>Long story short, I need to orchestrate 1 master/ 1 slave/ 1 sentinel with docker properly.</p><a id="more"></a>  <h1 id="Understand-the-docker-network"><a href="#Understand-the-docker-network" class="headerlink" title="Understand the docker network"></a>Understand the docker network</h1><p>Before starting to build the instances, we need to choose which docker network mode we are going to use.<br>A quick going through the following links you will get an idea that we have a few options, but since<br>I am building a bunch of standalone containers, <code>bridge</code> or <code>host</code> drivers seem reasonable to me(others seem to overkilling).</p><ul><li><a href="https://docs.docker.com/network/" target="_blank" rel="noopener">https://docs.docker.com/network/</a></li><li><a href="https://docs.docker.com/network/network-tutorial-standalone/" target="_blank" rel="noopener">https://docs.docker.com/network/network-tutorial-standalone/</a></li></ul><h1 id="Issue-with-bridge"><a href="#Issue-with-bridge" class="headerlink" title="Issue with bridge"></a>Issue with bridge</h1><p>Let me chose the default network driver bridge, it’s simple and straightforward, i.e.</p><ul><li>My Application -&gt; running on host</li><li>Sentinel -&gt; docker </li><li>Master -&gt; docker</li><li>Slave -&gt; docker<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ </span><br><span class="line">                                                                              </span><br><span class="line">│   <span class="selector-tag">bridge</span> <span class="selector-tag">network</span>                                                          │ </span><br><span class="line">                                                                              </span><br><span class="line">│          ┌─────────────────────────────────────────────────────┐          │ </span><br><span class="line">           │                                                     │            </span><br><span class="line">│          ▼                                                     ▼          │ </span><br><span class="line">   ┌───────────────┐           ┌───────────────┐         ┌───────────────┐    </span><br><span class="line">│  │               │           │               │         │               │  │ </span><br><span class="line">   │               │           │               │         │               │    </span><br><span class="line">│  │    <span class="selector-tag">Master</span>     │           │     <span class="selector-tag">Slave</span>     │         │   <span class="selector-tag">Sentinel</span>    │  │ </span><br><span class="line">   │  172<span class="selector-class">.19</span><span class="selector-class">.0</span><span class="selector-class">.2</span>   │◀─────────▶│  172<span class="selector-class">.19</span><span class="selector-class">.0</span><span class="selector-class">.3</span>   │◀───────▶│  172<span class="selector-class">.19</span><span class="selector-class">.0</span><span class="selector-class">.4</span>   │    </span><br><span class="line">│  │               │           │               │         │               │  │ </span><br><span class="line">   │               │           │               │         │               │    </span><br><span class="line">│  └───────────────┘           └───────────────┘         └───────────────┘  │ </span><br><span class="line">           ▲                                                     △            </span><br><span class="line">│          │                                                     │          │ </span><br><span class="line">           └──────────<span class="selector-tag">X</span>───────────────┐┌─────────────────────────┘            </span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┼│─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ </span><br><span class="line">                                      ││                                      </span><br><span class="line">                                      │▽  <span class="selector-tag">master</span> <span class="selector-tag">is</span> 172<span class="selector-class">.19</span><span class="selector-class">.0</span><span class="selector-class">.2</span>                </span><br><span class="line"> ┌───────────────────────────────────────────────────────────────────────────┐</span><br><span class="line"> │                                <span class="selector-tag">Application</span>                                │</span><br><span class="line"> │                                192<span class="selector-class">.169</span><span class="selector-class">.0</span><span class="selector-class">.2</span>                                │</span><br><span class="line"> │                                                                           │</span><br><span class="line"> └───────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure></li></ul><p>Oops, you see? When the application asks sentinel process for the master, it returns the <em>internal</em> IP of master,<br>because our application is not in the bridge network, 172.19.x.x is invisible.</p><h1 id="Switch-to-host-network"><a href="#Switch-to-host-network" class="headerlink" title="Switch to host network?"></a>Switch to host network?</h1><p>If I use host network, all boxes in the above diagram use the host’s network directly which means all are under 192.168.x.x and they can talk to each other without any obstacle. Unfortunately, it doesn’t look suitable to me just because I develop within OSX system; there is a prohibitive <a href="https://docs.docker.com/network/host/" target="_blank" rel="noopener">limitation</a>.</p><blockquote><p>The host networking driver only works on Linux hosts, and is not supported on Docker Desktop for Mac, Docker Desktop for Windows, or Docker EE for Windows Server.</p></blockquote><h1 id="Back-to-bridge"><a href="#Back-to-bridge" class="headerlink" title="Back to bridge"></a>Back to bridge</h1><p>I need to find a way to let those 4 boxes be able to talk to each other, yes, there is a way, i.e. <strong>port forwarding</strong>.<br>Exposing the master, slave,  and sentinel to the external network by different ports, now they are in one world!</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ </span><br><span class="line">                                                                              </span><br><span class="line">│         <span class="selector-tag">bridge</span> <span class="selector-tag">network</span>                                                    │ </span><br><span class="line">                                                                              </span><br><span class="line">│                                                                           │ </span><br><span class="line">   ┌──────────────────┐      ┌─────────────────┐       ┌─────────────────┐    </span><br><span class="line">│  │                  │      │                 │       │                 │  │ </span><br><span class="line">   │                  │      │                 │       │                 │    </span><br><span class="line">│  │      <span class="selector-tag">Master</span>      │      │      <span class="selector-tag">Slave</span>      │       │    <span class="selector-tag">Sentinel</span>     │  │ </span><br><span class="line">   │    172<span class="selector-class">.19</span><span class="selector-class">.0</span><span class="selector-class">.2</span>    │      │   172<span class="selector-class">.19</span><span class="selector-class">.0</span><span class="selector-class">.3</span>    │       │   172<span class="selector-class">.19</span><span class="selector-class">.0</span><span class="selector-class">.4</span>    │    </span><br><span class="line">│  │                  │      │                 │       │                 │  │ </span><br><span class="line">   │                  │      │                 │       │                 │    </span><br><span class="line">│  └─────────┬────────┘      └────────┬────────┘       └────────┬────────┘  │ </span><br><span class="line"> ─ ─ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ─  </span><br><span class="line">             ●                        ●                         ●            </span><br><span class="line">    ┌─────────────────┐      ┌─────────────────┐        ┌─────────────────┐   </span><br><span class="line">    │192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-pseudo">:6379</span> │      │192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-pseudo">:6380</span> │        │192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-pseudo">:26379</span>│   </span><br><span class="line">    │                 │◀────▶│                 │◀──────▶│                 │   </span><br><span class="line">    └─────────────────┘      └─────────────────┘        └─────────────────┘   </span><br><span class="line">             ▲        ▲                                 ▲        △            </span><br><span class="line">             │        │                                 │        │            </span><br><span class="line">             │        └─────────────────────────────────┘        │            </span><br><span class="line">             │                                                   │            </span><br><span class="line">             │                                                   │            </span><br><span class="line">             │                         <span class="selector-tag">master</span> <span class="selector-tag">is</span> 192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-pseudo">:6379</span>│            </span><br><span class="line"> ┌───────────┴───────────────────────────────────────────────────▽───────────┐</span><br><span class="line"> │                                <span class="selector-tag">Application</span>                                │</span><br><span class="line"> │                                192<span class="selector-class">.169</span><span class="selector-class">.0</span><span class="selector-class">.2</span>                                │</span><br><span class="line"> │                                                                           │</span><br><span class="line"> └───────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h1 id="Tweak-the-redis-configuration"><a href="#Tweak-the-redis-configuration" class="headerlink" title="Tweak the redis configuration"></a>Tweak the redis configuration</h1><p>The next step is that I need to set the redis configuration carefully, I can’t pass the internal IP in the config; everything should be the host’s IP.</p><p>Here is the docker-compose.yaml,<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  redis_master:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:3</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_master</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'6379:6379'</span></span><br><span class="line"><span class="attr">  redis_slave:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:3</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_slave</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-server</span> <span class="bullet">--port</span> <span class="number">6380</span> <span class="bullet">--slaveof</span> <span class="string">"$&#123;EXTERNAL_HOST&#125;"</span> <span class="number">6379</span> <span class="bullet">--slave-announce-ip</span> <span class="string">"$&#123;EXTERNAL_HOST&#125;"</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'6380:6380'</span></span><br><span class="line"><span class="attr">  sentinel:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">./sentinel</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_sentinel</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'26379:26379'</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SENTINEL_NAME=mysentinel</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">HOST_IP="$&#123;EXTERNAL_HOST&#125;"</span></span><br></pre></td></tr></table></figure></p><ul><li>master: nothing needs to be taken care, just expose the 6379 port.</li><li>slave: 2 important options, <code>--salveof</code> follows with master’s IP, and <code>--slave-announce-ip</code> is like <code>whoami</code> announcement for slave itself, see details <a href="https://redis.io/topics/replication#configuring-replication-in-docker-and-nat" target="_blank" rel="noopener">here</a>, both should be set with the host’s IP. Here I use a variable, you will see where the variable is from later. </li><li>sentinel: a bit complecated, but it will be clear as you continue reading.(<strong>Declaration</strong>: how to build the sentinel docker is heavily borrowed from <a href="https://github.com/mustafaileri/redis-cluster-with-sentinel" target="_blank" rel="noopener">https://github.com/mustafaileri/redis-cluster-with-sentinel</a>)</li></ul><h3 id="Sentinel-Dockefile"><a href="#Sentinel-Dockefile" class="headerlink" title="Sentinel Dockefile"></a>Sentinel Dockefile</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> redis:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">26379</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> sentinel.conf /etc/redis/sentinel.conf</span></span><br><span class="line"><span class="bash">RUN chown redis:redis /etc/redis/sentinel.conf</span></span><br><span class="line"><span class="bash">ENV SENTINEL_QUORUM 2</span></span><br><span class="line"><span class="bash">ENV SENTINEL_NAME mysentinel</span></span><br><span class="line"><span class="bash">ENV SENTINEL_DOWN_AFTER 30000</span></span><br><span class="line"><span class="bash">ENV SENTINEL_FAILOVER 180000</span></span><br><span class="line"><span class="bash">COPY sentinel-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"sentinel-entrypoint.sh"</span>]</span></span><br></pre></td></tr></table></figure><p>Nothing special except the <code>sentinel.conf</code> and sh script, no worries, they are elaborated as follows,</p><h3 id="sentinel-conf"><a href="#sentinel-conf" class="headerlink" title="sentinel.conf"></a>sentinel.conf</h3><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">port 26379</span><br><span class="line"></span><br><span class="line">dir /tmp</span><br><span class="line"></span><br><span class="line">sentinel<span class="built_in"> monitor </span>$SENTINEL_NAME $HOST_IP 6379 $SENTINEL_QUORUM</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds $SENTINEL_NAME $SENTINEL_DOWN_AFTER</span><br><span class="line"></span><br><span class="line">sentinel parallel-syncs $SENTINEL_NAME 1</span><br><span class="line"></span><br><span class="line">sentinel failover-timeout $SENTINEL_NAME $SENTINEL_FAILOVER</span><br></pre></td></tr></table></figure><p>A few basic settings, the significant two are <code>SENTINEL_NAME</code> and <code>HOST_IP</code>, they are actually from the docker-compose.yml, scroll up and check the environment part if you want.</p><h3 id="sentinel-entrypoint"><a href="#sentinel-entrypoint" class="headerlink" title="sentinel-entrypoint"></a>sentinel-entrypoint</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s/\$SENTINEL_QUORUM/<span class="variable">$SENTINEL_QUORUM</span>/g"</span> /etc/redis/sentinel.conf</span><br><span class="line">sed -i <span class="string">"s/\$SENTINEL_DOWN_AFTER/<span class="variable">$SENTINEL_DOWN_AFTER</span>/g"</span> /etc/redis/sentinel.conf</span><br><span class="line">sed -i <span class="string">"s/\$SENTINEL_FAILOVER/<span class="variable">$SENTINEL_FAILOVER</span>/g"</span> /etc/redis/sentinel.conf</span><br><span class="line">sed -i <span class="string">"s/\$SENTINEL_NAME/<span class="variable">$SENTINEL_NAME</span>/g"</span> /etc/redis/sentinel.conf</span><br><span class="line">sed -i <span class="string">"s/\$HOST_IP/<span class="variable">$HOST_IP</span>/g"</span> /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> docker-entrypoint.sh redis-server /etc/redis/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure><p>Replacing the variables in the sentinel.conf and start the sentinel, that’s it.<br>The 4 <code>SENTINEL_XXX</code> variables are from the Dockfile, the <code>HOST_IP</code> is set as <code>EXTERNAL_HOST</code> which is still from the docker-compose.yaml, the last question is, where does <code>EXTERNAL_HOST</code> come from?</p><h3 id="Last-piece"><a href="#Last-piece" class="headerlink" title="Last piece"></a>Last piece</h3><p>Remember the diagram with 4 boxes in one IP, the <code>EXTERNAL_HOST</code> is the IP of the host, apparently <code>localhost</code> won’t work here. Here I craft a script to start the dockers instead of <code>docker-compose up</code>,<br>the main difference is that I feed the IP to the environment variable.<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -ev</span><br><span class="line"></span><br><span class="line">IP=`ifconfig | grep -Eo <span class="string">'inet (addr:)?([0-9]*\.)&#123;3&#125;[0-9]*'</span> | grep -Eo <span class="string">'([0-9]*\.)&#123;3&#125;[0-9]*'</span> | grep -v <span class="string">'127.0.0.1'</span>`</span><br><span class="line"><span class="built_in">pushd</span> `dirname <span class="variable">$0</span>` <span class="comment"># make sure at the same folder as docker-compose.yml</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"EXTERNAL_HOST=<span class="variable">$IP</span>"</span> &gt; .env</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the services and wait for it.</span></span><br><span class="line">docker-compose up -d --build</span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure></p><p>The line with <code>ifconfig</code> seems to be scaring but it’s only to get the IP, the key point here is that I write the IP to the <code>.env</code> where docker-compose will reload environment variables.</p><h1 id="Feel-free-to-clone-and-try-it"><a href="#Feel-free-to-clone-and-try-it" class="headerlink" title="Feel free to clone and try it!"></a>Feel free to clone and try it!</h1><p><a href="https://github.com/xavierchow/docker-redis-sentinel" target="_blank" rel="noopener">https://github.com/xavierchow/docker-redis-sentinel</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.airbusdefenceandspacenetherlands.nl/dsstuff/uploads/2014/10/Sentinel-1-ESA.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I am a big fan of TDD, and I use docker a lot to build the dependencies(APIs, Database, etc.) for the unit test in my local development environment and CI. Everything goes well until one day our lovely DevOps guys asked me to use &lt;a href=&quot;https://redis.io/topics/sentinel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis sentinel&lt;/a&gt; which provides high availability, it’s a good practice, and I like the automatic failover capability. Since we always try to align the test environment to the production one, even for the local development environment, so I plan to build the Redis sentinel with docker.&lt;/p&gt;
&lt;h1 id=&quot;Challenge&quot;&gt;&lt;a href=&quot;#Challenge&quot; class=&quot;headerlink&quot; title=&quot;Challenge&quot;&gt;&lt;/a&gt;Challenge&lt;/h1&gt;&lt;p&gt;Redis Sentinel is a typical distributed architecture, the significant difference of using sentinel is that you should ask “redis-sentinel” for “redis-master” first, then issue redis command to the “redis-master” sentinel told you.&lt;br&gt;Long story short, I need to orchestrate 1 master/ 1 slave/ 1 sentinel with docker properly.&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>从命令式编程到函数式编程</title>
    <link href="http://yoursite.com/2019/01/05/a_step_to_fp/"/>
    <id>http://yoursite.com/2019/01/05/a_step_to_fp/</id>
    <published>2019-01-05T15:35:33.000Z</published>
    <updated>2019-01-10T14:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>不要被题目骗了:D, 此文不讲概念(题目太大)，只和大家分享一个很简单的案例, 权当抛砖引玉。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在做一个项目，对接的API要求对response body进行签名，验签规则此处不赘述了，有一点比较好玩的事要求对嵌套的字段进行stringify再进行验签处理，有点类似于lodash的<a href="https://lodash.com/docs/4.17.11#flatten" target="_blank" rel="noopener">flatten</a>, 不过不是处理array而是json object, 可能说到这里有点费解，看代码便知。</p><blockquote><p> TALK IS CHEAP, SHOW ME THE CODE!</p></blockquote><a id="more"></a>  <h2 id="测试先行"><a href="#测试先行" class="headerlink" title="测试先行"></a>测试先行</h2><p>上述的功能我要用一个叫<code>flatten</code>的函数实现，test code如下，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line">chai.should();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; flatten &#125; = <span class="built_in">require</span>(<span class="string">'../lib/sign'</span>);  <span class="comment">// the function I'm gonna build</span></span><br><span class="line">describe(<span class="string">'lib sign'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'flatten'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = &#123;</span><br><span class="line">      foo: <span class="string">'1000'</span>,</span><br><span class="line">      bar: <span class="number">2</span>,</span><br><span class="line">      qux: &#123;</span><br><span class="line">        qux1: <span class="string">'qux1'</span>,</span><br><span class="line">        qux2: <span class="number">22</span></span><br><span class="line">      &#125;,</span><br><span class="line">      sign: <span class="string">'abcd'</span>,</span><br><span class="line">      quz: [&#123; <span class="attr">quz1</span>: <span class="string">'quz1value'</span> &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> output = flatten(input);</span><br><span class="line">    output.should.be.eql(&#123;</span><br><span class="line">      foo: <span class="string">'1000'</span>,</span><br><span class="line">      bar: <span class="number">2</span>,</span><br><span class="line">      qux: <span class="string">'&#123;"qux1":"qux1","qux2":22&#125;'</span>,</span><br><span class="line">      quz: <span class="string">'[&#123;"quz1":"quz1value"&#125;]'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看出主要变化就2点，</p><ol><li><code>sign</code> 字段要被过滤掉</li><li>如果不是primitive的值，要做stringify<br>太简单了是不是？是不是primitive用一个<code>isObject</code>的函数来判断，其他的for 加 if 就解决了，</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj === <span class="built_in">Object</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">delete</span> obj.sign;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObject(obj[key])) &#123;</span><br><span class="line">      obj[key] = <span class="built_in">JSON</span>.stringify(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看! 测试也通过了，就这样结束了吗？</p><p>不。。。我不喜欢上面这个flatten方法，因为它不是immutable的，作为flatten的入参的这个object已被改的面目全非了, 比如在调用完flatten后你还想去找<code>sign</code>的值，对不起它已经不存在了。对immutable不太理解的同学可以移步这篇<a href="https://medium.freecodecamp.org/write-safer-and-cleaner-code-by-leveraging-the-power-of-immutability-7862df04b7b6" target="_blank" rel="noopener">博客</a>。</p><h2 id="如何改进"><a href="#如何改进" class="headerlink" title="如何改进"></a>如何改进</h2><p>因为有测试代码在保护着功能代码，我们可以大胆重构，比如，<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'sign'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isObject(obj[key])) &#123;</span><br><span class="line">      newObj[key] = <span class="built_in">JSON</span>.stringify(obj[key])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newObj[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好一些了，可是代码看上去好像变复杂了，如果有了解过lodash的话好像可以写的跟简洁一些，比如<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> objWithoutSign = _.omit(obj, [<span class="string">'sign'</span>])</span><br><span class="line">  <span class="keyword">return</span> _.mapValues(objWithoutSign, (val) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> isObject(val) ? <span class="built_in">JSON</span>.stringify(val) : val</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="大功告成？"><a href="#大功告成？" class="headerlink" title="大功告成？"></a>大功告成？</h2><p>不，这个flatten不够好，它没有复用性，比如我不需要过滤<code>sign</code>字段，但是还要stringify怎么办？再拷贝一份<code>_.mapValues(..)</code>处理？</p><p>轮到<a href="https://ramdajs.com/" target="_blank" rel="noopener">Ramda</a> 登场，为什么要用Ramda此处还是不赘述了，官网有好几篇很好的文章，我这里只分享我是如何实现的。同样地，因为有测试代码，又可以放心重构, 此处思路要有所转变，以funtional programming的方式，我们不考虑有什么数据要处理，而是考虑有哪些处理要aggregate， 显然，</p><ol><li>要过滤某一个字段 =&gt; R.omit</li><li>key/value中的value要转变 =&gt; R.map</li><li>value怎么转变？ =&gt; stringify<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> stringify = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> isObject(val) ? <span class="built_in">JSON</span>.stringify(val) : val</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> flatten = R.compose(</span><br><span class="line">  R.map(stringify),</span><br><span class="line">  R.omit([<span class="string">'sign'</span>])</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，现在我们用<code>R.compase</code>定义了<code>flatten</code>，同时还有一个辅助的fucntion <code>stringify</code>,<br>但是既然用了Function Programming的方式就尽量写的纯粹一些，<code>stringify</code>可以改写成</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stringify = R.ifElse(isObject, <span class="built_in">JSON</span>.stringify, R.identity);</span><br></pre></td></tr></table></figure><h2 id="百密一疏"><a href="#百密一疏" class="headerlink" title="百密一疏"></a>百密一疏</h2><p>智者千虑必有一疏，上述这个代码，测试是跑不过的。。。<br><code>output</code>是长得这幅样子，你看出来哪里有问题了吗？<br><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Object</span></span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  <span class="title">foo</span>:</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  <span class="title">qux</span>:</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  <span class="title">quz</span>:</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><h2 id="都是Curry惹的祸"><a href="#都是Curry惹的祸" class="headerlink" title="都是Curry惹的祸"></a>都是Curry惹的祸</h2><p>我们知道Ramda中所有的function都是curried化过的，详细解释移步<a href="https://ramdajs.com/docs/#curry" target="_blank" rel="noopener">此处</a>, 所有的value都变成function, 看起来很像是partial application，即参数不够（<del>没吃饱</del>), 默默地再翻了一下MDN关于stringify的文档</p><blockquote><p>JSON.stringify(value[, replacer[, space]])</p></blockquote><p>呃，忘了stringify 是三个参数（虽然不常用）, 此处需要<a href="https://ramdajs.com/docs/#unary" target="_blank" rel="noopener">R.unary</a> 来帮忙，因为Ramda的 compose/pipe都是需要function只支持一个参数的。</p><h2 id="Holy-Grail版"><a href="#Holy-Grail版" class="headerlink" title="Holy Grail版"></a>Holy Grail版</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj === <span class="built_in">Object</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> stringify = R.ifElse(isObject, R.unary(<span class="built_in">JSON</span>.stringify), R.identity);</span><br><span class="line"><span class="keyword">const</span> flatten = R.compose(</span><br><span class="line">  R.map(stringify),</span><br><span class="line">  R.omit([<span class="string">'sign'</span>])</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其实<code>isObject</code>也可以继续用Ramda改写，留给你当作业了 ：）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不要被题目骗了:D, 此文不讲概念(题目太大)，只和大家分享一个很简单的案例, 权当抛砖引玉。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在做一个项目，对接的API要求对response body进行签名，验签规则此处不赘述了，有一点比较好玩的事要求对嵌套的字段进行stringify再进行验签处理，有点类似于lodash的&lt;a href=&quot;https://lodash.com/docs/4.17.11#flatten&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flatten&lt;/a&gt;, 不过不是处理array而是json object, 可能说到这里有点费解，看代码便知。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; TALK IS CHEAP, SHOW ME THE CODE!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="functional programming" scheme="http://yoursite.com/tags/functional-programming/"/>
    
      <category term="ramda" scheme="http://yoursite.com/tags/ramda/"/>
    
      <category term="TDD" scheme="http://yoursite.com/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>Format json file within vim</title>
    <link href="http://yoursite.com/2017/10/15/format-json/"/>
    <id>http://yoursite.com/2017/10/15/format-json/</id>
    <published>2017-10-15T03:35:45.000Z</published>
    <updated>2017-10-15T03:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Put the following snip to your vimrc, whenever you open a JSON file, you can format it with hotkey fj in normal mode.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FmtJSON</span>(<span class="params">...</span>) </span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">code</span>="\"</span></span><br><span class="line"><span class="function">        \ <span class="title">var</span> <span class="title">i</span> = <span class="title">process</span>.<span class="title">stdin</span>, <span class="title">d</span> = '';</span></span><br><span class="line"><span class="function">        \ <span class="title">i</span>.<span class="title">resume</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function">        \ <span class="title">i</span>.<span class="title">setEncoding</span>(<span class="params"><span class="string">'utf8'</span></span>);</span></span><br><span class="line"><span class="function">        \ <span class="title">i</span>.<span class="title">on</span>(<span class="params"><span class="string">'data'</span>, function(data</span>) </span>&#123; d += data; &#125;);</span><br><span class="line">        \ i.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        \     <span class="keyword">try</span> &#123;</span><br><span class="line">        \       <span class="built_in">JSON</span>.parse(d) </span><br><span class="line">        \     &#125; <span class="keyword">catch</span>(e) &#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(d); &#125;</span><br><span class="line">        \     <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(d), <span class="literal">null</span>, </span><br><span class="line">        \ <span class="string">" . (a:0 ? a:1 ? a:1 : 2 : 2) . "</span>));</span><br><span class="line">        \ &#125;);\<span class="string">""</span></span><br><span class="line">  execute <span class="string">"%! node -e "</span> . code </span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">nmap fj :&lt;C-U&gt;call FmtJSON(v:count)&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>The main part of function FmtJSON is copied from somewhere, but if the JSON file is malformed you probably override the original file unexpectedly, so I added try-catch in the end event handler.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Put the following snip to your vimrc, whenever you open a JSON file, you can format it with hotkey fj in normal mode.&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Using Message Queues with Microservices</title>
    <link href="http://yoursite.com/2016/08/06/mq-with-microservice/"/>
    <id>http://yoursite.com/2016/08/06/mq-with-microservice/</id>
    <published>2016-08-06T12:41:10.000Z</published>
    <updated>2016-08-06T15:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/microservices-nsq-rabbitmq.png" alt=""></p><h2 id="We-build-Microservices"><a href="#We-build-Microservices" class="headerlink" title="We build Microservices"></a>We build Microservices</h2><p>So, what’s the big deal with microservices? Well, there are numerous benefits to building these little guys compared to the <a href="https://en.wikipedia.org/wiki/Monolithic_system" target="_blank" rel="noopener">traditional monolithic architecture</a> of days long gone:</p><ol><li>Small codebase</li><li>Reusable</li><li>Loosly coupled</li><li>Easy to enhance and extend</li><li>Easy to deply and scale</li><li>Plug-and-play format</li></ol><a id="more"></a>  <p>I won’t waste your time telling you why you should be using microservices, there are plenty of folks advocating this approach already. You can refer to <a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">MartinFowler.com</a> and <a href="https://blog.risingstack.com/why-you-should-start-using-microservices/" target="_blank" rel="noopener">these guys</a> for more information about what microservices are and the advantages they have.<br>Despite their extreme usefulness, microservices are certainly not some silve bullet for all of you backend problems. One of their biggest downfalls is the complexity of interaction between the servcies you build. </p><p>We use <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> and <a href="https://loopback.io/" target="_blank" rel="noopener">loopback</a> to build REST API services, which means the we mainly rely HTTP(S) protocal, As you start to build the backend, it’s not too difficult to keep a clean and graceful structure at beginning, because you can definately differentiate the upstream and downstream services clealy and neatly. However as the requirements increase in volume and complexity and the system evolves, you may find you messed something up and the API callings are now looking like your mother’s spaghetti!</p><p><img src="/images/microservices-nsq-rabbitmq-1.png" alt=""></p><h2 id="Why-we-use-message-queues"><a href="#Why-we-use-message-queues" class="headerlink" title="Why we use message queues"></a>Why we use message queues</h2><p>The cross dependency means the system is tightly coupled, so no single service can go it alone without cooperation from other services. We use the message queue as a supplement for decoupling and keeping the the architecture flexible.<br>Acturally, in addition to the decoupling, we expect the following features from message queue:</p><ol><li>A mechanism with retry(and delay retry upon failure)</li><li>Pub-sub(publish-subscriber) pattern</li></ol><h3 id="Candidates"><a href="#Candidates" class="headerlink" title="Candidates"></a>Candidates</h3><p>We have 2 candidates for serving as our message queue platfom: <a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a> and <a href="http://nsq.io/" target="_blank" rel="noopener">NSQ</a>, both have their own pros and cons, so let’s evaluate.</p><ul><li><p>Pros of RabbitMQ</p><ul><li>Based on the open standard protocal: <a href="https://www.amqp.org/" target="_blank" rel="noopener">AMQP</a></li><li>Mature and stable</li><li>Introcude <code>exchange</code> between producer and consumer and fledged with lots of patterns(Direct/Worker/Pub-Sub/Route/RPC…)</li></ul></li><li><p>Cons of RabbitMQ</p><ul><li>A bit steep learning curve</li><li>Not easy to implement retry with failiure.</li></ul></li><li><p>Pros of NSQ</p><ul><li>Good at distributed topologies with no <a href="https://en.wikipedia.org/wiki/Single_point_of_failure" target="_blank" rel="noopener">SPOF</a>, which means high available(even if some nodes go down you can still use the messaging service)</li><li>One concise message model</li><li>Supoort retry with delay naturally</li></ul></li><li><p>Cons of NSQ</p><ul><li>Messages are not durable by default</li></ul></li></ul><h3 id="Why-we-choose-NSQ"><a href="#Why-we-choose-NSQ" class="headerlink" title="Why we choose NSQ"></a>Why we choose NSQ</h3><p>First, the message model of NSQ is simple and direct. No middle man no broker. All you need do is just define the producer and consumer. If you need fanout or broadcast, you can add multiple channels for the topic.</p><p>Second, we need retry with a delay mechanism. Though it is doable to use RabbitMQ, it’s not so that easy to manage. The main approach for this is using an additional <a href="https://www.rabbitmq.com/dlx.html" target="_blank" rel="noopener">deadletter exchange</a> to simulate the delay-attempts.<br>Here’s the <a href="http://yuserinterface.com/dev/2013/01/08/how-to-schedule-delay-messages-with-rabbitmq-using-a-dead-letter-exchange/" target="_blank" rel="noopener">gist of how it works</a>. It’s an unnecessary hassle, so we avoid tit whenever possible.</p><p><img src="/images/microservices-nsq-rabbitmq-2.png" alt=""></p><p>If you use NSQ, you merely need to call <code>requeue()</code> with parameter of delay, then you’re done!</p><p>The last reason we choose NSQ is its core is written by <a href="http://golang.org/" target="_blank" rel="noopener">Go</a>. Aside fromn Node.js, we also use Go for some of our backend porjects, let’s keep trying and chanlleging new techonolies. :D</p><p><img src="/images/microservices-nsq-rabbitmq-2.png" alt=""></p><p>Something worth mentioning again, NSQ is not perfect and does have its pain points (e.g. if you want to ensure strong message durability), so you should be aware of the following shortcomings. </p><ul><li>No message replication and it’s mainly in memory.</li><li>No publisher confirmation. If there’s a failure in the nsqd node when the message happens to arrive, you lost this message.</li></ul><p>There is <a href="https://github.com/mreiferson/mreiferson.github.com/blob/nsq_roadmap_1/posts/nsq_roadmap.md" target="_blank" rel="noopener">roadmap</a> of NSQ’s durability and delivery guarantee. To solve the problems above you can duplicate the message with the same topic to ensure it will be delivered at least once(but more than once in most of cases), this means you need your client to de-dupe or make the operation idempotent.</p><h2 id="How-we-use-NSQ"><a href="#How-we-use-NSQ" class="headerlink" title="How we use NSQ"></a>How we use NSQ</h2><p>There’re plenty of client libraries in <a href="http://nsq.io/clients/client_libraries.html" target="_blank" rel="noopener">NSQ website</a>. We use the offical JavaScript client <a href="https://github.com/dudleycarr/nsqjs" target="_blank" rel="noopener">nsqjs</a> to build our loopback based microservice. However we are not satisfied with the <code>Writer</code> interface, because you have to known the <code>nsqd</code> address beforehand and pass it to the Writer, which is not at all practical. We may scale the nsqd cluster according the needs and the nsqd itself should be able to auto-discovered(not only for consumer but also for the producer side).</p><p>That’s why we build the library <a href="https://github.com/Wiredcraft/nsq-strategies" target="_blank" rel="noopener">nsq-strategies</a>, a wrapper of official client library(nsqjs) with different strategies. Currently it supports round-robin and fanout strategies. For example, you now can transfer the lookupd addresses to the producer which means you don’t need to change the code when the nsqd cluster changes and the prodcuer would pick one of nsqd nodes in a round-robin way for sending message.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Producer = <span class="built_in">require</span>(<span class="string">'nsq-strategies'</span>).Producer;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> Producer(&#123;</span><br><span class="line">    lookupdHTTPAddresses: [<span class="string">'127.0.0.1:9011'</span>, <span class="string">'127.0.0.1:9012'</span>]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    strategy: Producer.ROUND_ROBIN</span><br><span class="line">  &#125;);</span><br><span class="line">  p.connect(<span class="function">(<span class="params">errors</span>) =&gt;</span> &#123;</span><br><span class="line">    p.produce(<span class="string">'topic'</span>, <span class="string">'message'</span>, (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Wrapping-things-up"><a href="#Wrapping-things-up" class="headerlink" title="Wrapping things up"></a>Wrapping things up</h2><p>If you are building microservies, you should consider adopting a message queue as a supplement and give it a try with NSQ (or RabbitMQ).<br>Use it then improve it, like we did. That’s the way we build apps that matters.</p><p>Finally thanks to <a href="https://github.com/hopechen1028" target="_blank" rel="noopener">@hopechen1028</a> and <a href="https://github.com/jonathangoodwin" target="_blank" rel="noopener">@jonathangoodwin</a> for illustration and help to polish my words.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/microservices-nsq-rabbitmq.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;We-build-Microservices&quot;&gt;&lt;a href=&quot;#We-build-Microservices&quot; class=&quot;headerlink&quot; title=&quot;We build Microservices&quot;&gt;&lt;/a&gt;We build Microservices&lt;/h2&gt;&lt;p&gt;So, what’s the big deal with microservices? Well, there are numerous benefits to building these little guys compared to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Monolithic_system&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;traditional monolithic architecture&lt;/a&gt; of days long gone:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Small codebase&lt;/li&gt;
&lt;li&gt;Reusable&lt;/li&gt;
&lt;li&gt;Loosly coupled&lt;/li&gt;
&lt;li&gt;Easy to enhance and extend&lt;/li&gt;
&lt;li&gt;Easy to deply and scale&lt;/li&gt;
&lt;li&gt;Plug-and-play format&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Nsq" scheme="http://yoursite.com/tags/Nsq/"/>
    
      <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>How to extend Javascript Error</title>
    <link href="http://yoursite.com/2016/06/02/custom-error/"/>
    <id>http://yoursite.com/2016/06/02/custom-error/</id>
    <published>2016-06-02T15:34:10.000Z</published>
    <updated>2016-06-04T14:46:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>When your application becomes larger and more complex, you may find the default Javascript <code>Error</code> is not enough, you might want to use different Errors for different modules or customize it with self-defined properties, then it’s time to extend it properly.<br><a id="more"></a>  </p><h1 id="How-to-extend-error"><a href="#How-to-extend-error" class="headerlink" title="How to extend error"></a>How to extend error</h1><h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><p>It’s quite straightforward, using <code>util.inherits</code> and customize properties, that’s all.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyError</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.inherits(MyError, <span class="built_in">Error</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> MyError(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br></pre></td></tr></table></figure></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>But it’s 2016, we have node v4/v5/v6, you should use es6!<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(message) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> MyError(<span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br></pre></td></tr></table></figure></p><p>However the code above doesn’t work, you will get an error <code>ReferenceError: this is not defined</code>,<br>the reason is forgetting to call <code>super()</code> in constructor, you can refer to <a href="http://stackoverflow.com/questions/31067368/javascript-es6-class-extend-without-super" target="_blank" rel="noopener">here</a> for details.<br>So is the following code good enough?<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(message) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> MyError(<span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br></pre></td></tr></table></figure></p><h2 id="captureStackTrace"><a href="#captureStackTrace" class="headerlink" title="captureStackTrace"></a>captureStackTrace</h2><p>The answer is No if you care about call stack, consider the following code:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(message) &#123;</span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">// (A)</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  main();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.stack);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  sub();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MyError(<span class="string">'baz'</span>); <span class="comment">// (B)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You will find the stack frame is from (A) instead of (B), which in most of cases is not expected. The solution is using <a href="https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt" target="_blank" rel="noopener">captureStackTrace</a>. The defination is as follows.<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Error</span><span class="selector-class">.captureStackTrace</span>(<span class="selector-tag">targetObject</span><span class="selector-attr">[, constructorOpt]</span>)</span><br></pre></td></tr></table></figure></p><p>It mainly creates the <code>.stack</code> property for the error which indicates the location where the error is from. The first param is an object which relates to the first line of stack, but just note this sentence in document <code>The first line of the trace, instead of being prefixed with ErrorType: message, will be the result of calling targetObject.toString()</code> , actually it’s not ture, the <code>toString</code> doesn’t work at least for node v4, there’s also a github <a href="https://github.com/nodejs/node/issues/5675" target="_blank" rel="noopener">issue</a> for it, it just concatenates the <code>name</code> and <code>message</code> together for now, let’s skip it as it’s not so important.</p><p>The second param is what we need to hide the stack frame, given a function, all frame above it(including itself) will be omit from the stack.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(message) &#123;</span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">// (A)</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</span><br><span class="line">    <span class="keyword">this</span>.message = message;</span><br><span class="line">    <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>, MyError); <span class="comment">// added</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  main();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.stack);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  sub();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MyError(<span class="string">'baz'</span>); <span class="comment">// (B)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This time the stack frame is from (B). Quite simple, isn’t it? </p><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>There’s still something to be imporved in fact, e.g compatibility and robustness, but I will not elaborate here,<br>because there’s already a tiny but convenient <a href="https://github.com/bjyoungblood/es6-error" target="_blank" rel="noopener">boilerplate</a> you can leverage, give it a try!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h1&gt;&lt;p&gt;When your application becomes larger and more complex, you may find the default Javascript &lt;code&gt;Error&lt;/code&gt; is not enough, you might want to use different Errors for different modules or customize it with self-defined properties, then it’s time to extend it properly.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Why use tj/co</title>
    <link href="http://yoursite.com/2016/05/15/understand-co/"/>
    <id>http://yoursite.com/2016/05/15/understand-co/</id>
    <published>2016-05-15T07:26:05.000Z</published>
    <updated>2016-05-15T07:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>大神<a href="https://github.com/tj" target="_blank" rel="noopener">tj</a>的<a href="https://github.com/tj/co" target="_blank" rel="noopener">co</a>已经超过5千star了，之前公司的小伙伴有在用这个模块，那时我还没有开始用es6，对于genenrator也是一知半解，匆匆扫了一眼，说实话没看懂，当时手头也比较忙也就这样先放着了。</p><p>转眼在项目中正式用es6也有半年多了，准备回过头来再学一下co，翻了一下github上的README, 什么鬼？还是没搞懂。。。主要问题是examples只讲了<strong>how</strong>，而没有讲<strong>why</strong>，而这正是我所在意的，我为什么要用这个模块，有什么好处？<br><a id="more"></a>  </p><p>于是在<a href="https://medium.com/" target="_blank" rel="noopener">Medium</a>上翻到了tj的这篇博客<a href="https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127#.9fw59pduu" target="_blank" rel="noopener">Callbacks vs Coroutines</a>，<br>看完之后不禁拍案，原来动机如此，co想解决的事原来在我学习generator的时候我也尝试过！</p><p>短话长说（反了？），我们知道es6 generator function可以重复进入，程序运行到yield语句时，控制权转移到function外部，调next的时候，控制权回来。然而generator内的代码看上去是同步顺序执行的，<br>这不正是一个能完美的将异步调用转成类似同步执行的特性吗？（没错，对于天生异步的node.js，人们一直致力于将它拧巴地或优雅地转换成人类习惯的同步方式中)</p><p>上代码：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> myrequest(<span class="string">"http://some.url"</span>);</span><br><span class="line">  <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">  <span class="built_in">console</span>.log(res.msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myrequest</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  makeAjaxCall(url, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    gen.next(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = main();</span><br><span class="line">gen.next();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'request'</span>)(<span class="string">'http://some.url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">    callback(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出主逻辑（main）是同步的而且很清晰，但是异步并没有平白消失，只是它们被移到了别的地方（makeAjaxCall），但是我们保证了主控制流是同步的，你可以说这是语法糖也好，但是promise也不是类似的思路么？<br>事实上co也是如此，就如同上面一样利用generator的特性来扭转控制流，当然比我上面的例子更优雅更强大（强壮）。</p><p>上面的代码用co重写后是这样的：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseAjax = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'request-promise'</span>).get(<span class="string">'http://some.url'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result =  <span class="keyword">yield</span> promiseAjax();</span><br><span class="line">  <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(r);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>所以在面对callback hell的时候除了<a href="https://github.com/caolan/async" target="_blank" rel="noopener">aysnc</a>, promise外又多了一个好办法。</p><p>下一步我要好好读一下co的源码，我建议你也这样做，或者至少你应该看一下这篇博客<a href="https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127#.9fw59pduu" target="_blank" rel="noopener">Callbacks vs Coroutines</a>，我相信会让你受益匪浅的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大神&lt;a href=&quot;https://github.com/tj&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tj&lt;/a&gt;的&lt;a href=&quot;https://github.com/tj/co&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;co&lt;/a&gt;已经超过5千star了，之前公司的小伙伴有在用这个模块，那时我还没有开始用es6，对于genenrator也是一知半解，匆匆扫了一眼，说实话没看懂，当时手头也比较忙也就这样先放着了。&lt;/p&gt;
&lt;p&gt;转眼在项目中正式用es6也有半年多了，准备回过头来再学一下co，翻了一下github上的README, 什么鬼？还是没搞懂。。。主要问题是examples只讲了&lt;strong&gt;how&lt;/strong&gt;，而没有讲&lt;strong&gt;why&lt;/strong&gt;，而这正是我所在意的，我为什么要用这个模块，有什么好处？&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="flow-control" scheme="http://yoursite.com/tags/flow-control/"/>
    
  </entry>
  
  <entry>
    <title>How to leave focus from Chrome address bar without mouse</title>
    <link href="http://yoursite.com/2016/03/07/vimium-leave-address-bar/"/>
    <id>http://yoursite.com/2016/03/07/vimium-leave-address-bar/</id>
    <published>2016-03-07T15:45:05.000Z</published>
    <updated>2016-03-07T15:53:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a vimer, I have been using a plugin called <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" target="_blank" rel="noopener">Vimium</a> in chrome for a long time. It keeps me to play with the browser in vim hotkey conventions, therefore I don’t need mouse or touchpad to scroll/jump link/history back etc, however there is one thing sometimes annoys me, the <strong>address bar</strong>.<br><a id="more"></a>  </p><p>Although most of the time you can use <code>o</code> or <code>O</code> to open URL or history in current tab or new tab, <code>Ctrl-L</code> to highlight the address bar and modifying the URL is not a rare case.<br>Here comes the issue, when the address bar is highlighted(i.e in input mode), unless you click the <code>enter</code> to reload the whole page the vimium is not active, neither can you expect to press <code>esc</code> to back to the page.</p><p>In such situation, to get focus back to the page, you have 3 choices:</p><ol><li>use mouse to click the page(html body), this is the most straightforward one but I don’t want to move my fingers from keyboard, so it passed.</li><li>use tab, it can move focus to the next control in browser and eventually you can focus on html body and continue the vimium key shortcuts.<br>However, if you are a guy as me has lots of plugins installed, you have to tab multiple times to get the focus on page. It’s no ideal solution.<br><img src="/images/chrome-plugins.png" alt=""></li><li>This one is a bit tricky but it works. <code>Cmd-F</code>(Or <code>Ctrl-F</code> at Windows) to trigger the search box, and input any character(the simplest one is <code>blank</code>) then <code>esc</code>, it brings you back to web page as well, but this solution has two cons:<ul><li>It needs 3 key-strokes, not so concise.</li><li>If you are in the middle of the page(by scrolling or whatever way), then the combination above will always bring you back to the top of page. Quite annoying, isn’t it?</li></ul></li></ol><p>Thanks to the <a href="http://superuser.com/users/106061/reycharles" target="_blank" rel="noopener">@ReyCharles</a> ‘s answer <a href="http://superuser.com/questions/324266/google-chrome-mac-set-keyboard-focus-from-address-bar-back-to-page/324267#324267" target="_blank" rel="noopener">here</a>, got the Holy Grail as follows,</p><ol><li>In search engines setting, add a new one.</li><li>Name the new engine with whatever you like, I named it as <code>leaveAddressBar</code>.</li><li>A simple hot key for <code>Keyword</code>, as the illustration I used <code>u</code>.</li><li>In <code>URL</code> field, input <code>javascript:</code>, this is the point which moves focus back to the page.<br><img src="/images/search-engine.png" alt=""></li></ol><p>Done, now feel free to fiddle the address bar without mouse!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a vimer, I have been using a plugin called &lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vimium&lt;/a&gt; in chrome for a long time. It keeps me to play with the browser in vim hotkey conventions, therefore I don’t need mouse or touchpad to scroll/jump link/history back etc, however there is one thing sometimes annoys me, the &lt;strong&gt;address bar&lt;/strong&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Is empty array in JavaScript truthy or falsy?</title>
    <link href="http://yoursite.com/2015/12/15/js-coercion/"/>
    <id>http://yoursite.com/2015/12/15/js-coercion/</id>
    <published>2015-12-15T15:25:35.000Z</published>
    <updated>2016-05-15T07:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today, one of my friends argued with me about the empty array <code>[]</code>, he think it’s falsy but in my experience I persist it should be truthy.<br><a id="more"></a><br>So, I demo it as follows:<br><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">var a = [];</span><br><span class="line">if (a) console.log('empty<span class="built_in"> array </span>is truthy');</span><br></pre></td></tr></table></figure></p><p>Or you can also use double logical NOT to cast it to boolean, it’s the same.<br><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">var a = [];</span><br><span class="line">if (!!a) console.log('empty<span class="built_in"> array </span>is truthy');</span><br></pre></td></tr></table></figure></p><p>Looking the the evidence sentence shown in the screen, I think the argument is over till he shows me the following code,<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([] == <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><h2 id="Guess-what"><a href="#Guess-what" class="headerlink" title="Guess what?"></a>Guess what?</h2><p>The result is <strong>true</strong>. Woooooot? Well, I know there must be something wrong, escpecially the suspicous loose equality operation. I have to figure it out why it has such odd behaviour.</p><h2 id="Type-Coertion"><a href="#Type-Coertion" class="headerlink" title="Type Coertion"></a>Type Coertion</h2><p>There are both awesome articles about the equality comparison algorithm in JavaScript world.</p><ul><li><a href="http://bclary.com/2004/11/07/#a-11.9.3" target="_blank" rel="noopener">http://bclary.com/2004/11/07/#a-11.9.3</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness</a><br><img src="/images/js-coercion-table.png" alt=""><br>–<em>table from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness</a></em></li></ul><p>The key point is applying <code>ToPrimitive([])</code> and <code>ToNumber(false)</code>, then compare them.</p><h3 id="What’s-ToPrimitive"><a href="#What’s-ToPrimitive" class="headerlink" title="What’s ToPrimitive?"></a>What’s ToPrimitive?</h3><p>ToPrimitive is a internal operation which attempts to convert its object argument to a primitive value, by attempting to invoke varying sequences of <code>toString</code> and <code>valueOf</code> methods on the Object. The detail steps can be found here: <a href="http://bclary.com/2004/11/07/#a-9.1" target="_blank" rel="noopener">http://bclary.com/2004/11/07/#a-9.1</a><br>So, firstly try <code>[].valueOf()</code> which returns itself, it’s not primitive, then try to call <code>[].toString</code>, for <code>Array.toString</code>, according <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString" target="_blank" rel="noopener">MDN</a>, </p><blockquote><p>For Array objects, the toString method joins the array and returns one string containing each array element separated by commas. </p></blockquote><p>This means we get the empty string <code>&#39;&#39;</code>.</p><h3 id="What’s-the-ToNumber"><a href="#What’s-the-ToNumber" class="headerlink" title="What’s the ToNumber?"></a>What’s the ToNumber?</h3><p>Basically apply the <code>+</code> operation on the target, for boolean, </p><blockquote><p> 1 if the argument is true. +0 if the argument is false.</p></blockquote><p>for other types refer to :<a href="http://bclary.com/2004/11/07/#a-9.3" target="_blank" rel="noopener">http://bclary.com/2004/11/07/#a-9.3</a></p><h2 id="Problem-now-is-simplified"><a href="#Problem-now-is-simplified" class="headerlink" title="Problem now is simplified"></a>Problem now is simplified</h2><p>Is <code>&#39;&#39; == 0</code> truthy or falsy? Again begin with applying <code>ToNumber</code> to emtpy string <code>&#39;&#39;</code>, the rules is complicated <a href="http://bclary.com/2004/11/07/#a-9.3.1" target="_blank" rel="noopener">here</a> but for empty string it’s simple as follows,</p><blockquote><p>A StringNumericLiteral that is empty or contains only white space is converted to +0.</p></blockquote><p>So, <code>0 === 0</code>? Surely it’s true.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Do <strong>NOT</strong> use loose eqality operation, it’s complex and confusing even for experienced JavaScript developers. Although the only exception is checking with null and undefined because either is equal to itself. i.e <code>foo != null</code> is equivalent to <code>foo !== null</code> &amp;&amp; <code>foo !== undefined</code>. However, I don’t recommend this way for less typing leads more confusion, the reader may even doubt whether the author forgot a <code>=</code> or not.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today, one of my friends argued with me about the empty array &lt;code&gt;[]&lt;/code&gt;, he think it’s falsy but in my experience I persist it should be truthy.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>It&#39;s time to make a changelog</title>
    <link href="http://yoursite.com/2015/12/13/changelog/"/>
    <id>http://yoursite.com/2015/12/13/changelog/</id>
    <published>2015-12-13T14:01:33.000Z</published>
    <updated>2015-12-13T14:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What’s-changelog-and-why-use-it"><a href="#What’s-changelog-and-why-use-it" class="headerlink" title="What’s changelog and why use it?"></a>What’s changelog and why use it?</h2><p>Changelog records the history changes for a development, it lets users or contributors easily find what’s changed in the certain release or tag.<br>Usually it containes records as fix bugs, features, deprecated or something else. Normally it’s named with <code>CHANGELOG.md</code>, <code>History.md</code> etc. although the best convension I think is <code>CHANGELOG.md</code>.<br>Here is a pretty well post with comprehensive description for <strong>changelog</strong>. <a href="http://keepachangelog.com/" target="_blank" rel="noopener">http://keepachangelog.com/</a> and from there you can also find why use changelog.<br><a id="more"></a>  </p><h2 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h2><p>There are serveral approaches for creating changelog.</p><h3 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h3><p>Absolutelly in this way your changelog will be most valuable as long as you care it. The cons is it costs some extra effort. For me, as I’m a lazy developer, I don’t like this way.</p><h3 id="git-changelog"><a href="#git-changelog" class="headerlink" title="git changelog"></a>git changelog</h3><p>This is a command in <a href="https://github.com/tj/git-extras/blob/master/Commands.md#git-changelog" target="_blank" rel="noopener">git-extra</a>. It dumps the commits into the changelog with a tag name and is very easy to use. However, just wrapping development commits into a changelog also makes it meanningless because most of time it ends up with trival information such as <code>fix typo</code>. </p><blockquote><p>As is the difference between good comments and the code itself, so is the difference between a change log and the commit log: one describes the why, the other the how.</p><footer><strong>http://keepachangelog.com/</strong></footer></blockquote><h3 id="github-changelog-generator"><a href="#github-changelog-generator" class="headerlink" title="github-changelog-generator"></a>github-changelog-generator</h3><p>If your project is highly relied on github features, (github-changelog-generator)[] is a good choice. It automatically collects the issues, pull requests, tags and labels<br>into the changelog. The cons is that don’t forget to make issues for you notable changes, bug fix and also have to label them, actually I don’t think it’s a cons because<br>thosse activities mentioned above are after all the best practises you should adhere to, right?</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>No matter which approache you use, the important point is that you care about changelog and take care of it. You will have prifited from it.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What’s-changelog-and-why-use-it&quot;&gt;&lt;a href=&quot;#What’s-changelog-and-why-use-it&quot; class=&quot;headerlink&quot; title=&quot;What’s changelog and why use it?&quot;&gt;&lt;/a&gt;What’s changelog and why use it?&lt;/h2&gt;&lt;p&gt;Changelog records the history changes for a development, it lets users or contributors easily find what’s changed in the certain release or tag.&lt;br&gt;Usually it containes records as fix bugs, features, deprecated or something else. Normally it’s named with &lt;code&gt;CHANGELOG.md&lt;/code&gt;, &lt;code&gt;History.md&lt;/code&gt; etc. although the best convension I think is &lt;code&gt;CHANGELOG.md&lt;/code&gt;.&lt;br&gt;Here is a pretty well post with comprehensive description for &lt;strong&gt;changelog&lt;/strong&gt;. &lt;a href=&quot;http://keepachangelog.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://keepachangelog.com/&lt;/a&gt; and from there you can also find why use changelog.&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Merge vs Rebase</title>
    <link href="http://yoursite.com/2015/11/27/merge-vs-rebase/"/>
    <id>http://yoursite.com/2015/11/27/merge-vs-rebase/</id>
    <published>2015-11-27T15:55:16.000Z</published>
    <updated>2015-12-13T13:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>Nowadays lots of teams use git as the VCS, one of most power feature of git is branching, so it’s not uncommon that we need to frequently incorporate feasures into master or vise versa. As you know, there are two approches <code>merge</code> and <code>rebase</code>.<br>Then you may be wondering shall we use <code>git merge</code> or <code>git rebase</code>? The debates between these two is a bit controvertial and also there is holy-wars likes <code>vim vs emacs</code> or <code>Tabs vs Spaces</code> between them, here I have no interest to join the debate, which means I am not talking which one is better, but in a certain scenario whichone is more suitable.<br><a id="more"></a></p><h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>Merge brings the commits in one branch which are not in the other(current) branch into the current branch with a <strong>merge</strong> commit.<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">A<span class="function"> -&gt;</span> B<span class="function"> -&gt;</span> C (master)</span><br><span class="line">      <span class="string">\</span></span><br><span class="line">       D<span class="function"> -&gt;</span> E (feature)</span><br></pre></td></tr></table></figure></p><p>Base upon the commit trees above, <code>git merge master</code> on feature branch leads to:<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">A<span class="function"> -&gt;</span> B<span class="function">  -&gt;</span>   C    (master)</span><br><span class="line">      <span class="string">\</span>        <span class="string">\</span></span><br><span class="line">       D<span class="function"> -&gt;</span> E<span class="function"> -&gt;</span> F(feature)</span><br></pre></td></tr></table></figure></p><p>The commit <code>F</code> is a merge commit with two parents (Note the <code>Merge:</code> line below) something likes<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commit 6ff74286c4573adf2e330d59ee1aaa8841f756a9</span><br><span class="line">Merge: 1df0415 70e1786</span><br><span class="line">Author: xavierzhou &lt;xiayezhou#googlemail.com&gt;</span><br><span class="line">Date:   Sun Nov 22 23:25:37 2015 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch &apos;feature&apos;</span><br></pre></td></tr></table></figure></p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>Rebase also brings the commits in one branch which are not in the other(upstream) branch into the upstream branch with a <strong>transplant</strong> way.<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">A<span class="function"> -&gt;</span> B<span class="function"> -&gt;</span> C (master)</span><br><span class="line">      <span class="string">\</span></span><br><span class="line">       D<span class="function"> -&gt;</span> E (feature)</span><br></pre></td></tr></table></figure></p><p>Base upon the commit trees above, <code>git rebase master</code> at feature leads to:<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">A<span class="function"> -&gt;</span> B<span class="function"> -&gt;</span> C (master)</span><br><span class="line">           <span class="string">\</span>      </span><br><span class="line">            D<span class="function"> -&gt;</span> E (feature)</span><br></pre></td></tr></table></figure></p><p>Here you can find the hisotry of feature branch is changed.(from <code>A-&gt;B-&gt;D-&gt;E</code> to <code>A-&gt;B-&gt;C-&gt;D-&gt;E</code>), keep this in mind, it’s very important!</p><h1 id="Usage-Scenario"><a href="#Usage-Scenario" class="headerlink" title="Usage Scenario"></a>Usage Scenario</h1><h2 id="Working-on-master-and-wanna-bring-other-branch-back"><a href="#Working-on-master-and-wanna-bring-other-branch-back" class="headerlink" title="Working on master and wanna bring other branch back"></a>Working on master and wanna bring other branch back</h2><ul><li>Best practise:<br>Always use merge please! i.e <code>git checkout master &amp;&amp; git merge feature</code>.</li><li>Explanation:<br>You still remember the <code>rebase</code> will change the history of branch? Altering the master branch history will makes other collabrator confuse and stuck.</li></ul><h2 id="Sitting-in-a-feature-branch-and-wanna-take-in-the-changeset-happened-in-master"><a href="#Sitting-in-a-feature-branch-and-wanna-take-in-the-changeset-happened-in-master" class="headerlink" title="Sitting in  a feature branch and wanna take in the changeset happened in master"></a>Sitting in  a feature branch and wanna take in the changeset happened in master</h2><ul><li>Best practise:<br>Both <code>merge</code> and <code>rebase</code> are appropriate. i.e <code>git merge master</code> or <code>git rebase master</code>.</li><li>Explanation:<br>If you prefer linear history and clean log for this feature, you should use <code>rebase</code>, if you prefer to keep the historical context then use <code>merge</code>.<br>N.B.<br>If you have pushed the branch to remote or as a Pull Request, make sure nobody will fetch your branch if you used <code>rebase</code> since it changes the history.</li></ul><h2 id="Woking-on-a-branch-which-hasn’t-been-published-push-and-wanna-clean-up"><a href="#Woking-on-a-branch-which-hasn’t-been-published-push-and-wanna-clean-up" class="headerlink" title="Woking on a branch which hasn’t been published(push) and wanna clean up"></a>Woking on a branch which hasn’t been published(push) and wanna clean up</h2><ul><li>Best practise:<br><code>git rebase -i</code> is what you need.</li><li>Explanation:<br>It’s not rare that you finished some works with a commit, and realized <code>Damn, forgot to add some file!</code> or <code>Sh*t, another typo here</code> things. Then you makes more commits with<br>those fixs and your <code>git log</code> looks rather ugly as follows, <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">121ca50 Fix another typo</span><br><span class="line">b253d57 Fix typo</span><br><span class="line">60bfba2 Add forgot config files</span><br><span class="line">ae6058c Implement feature</span><br></pre></td></tr></table></figure></li></ul><p>You can use <code>git rebase -i HEAD~4</code> to clean up history, which brings the default editor for git, and you now can <code>reword</code>, <code>squash</code>, <code>fixup</code> or even just remove some commits.</p><h2 id="A-pull-request-was-reviewed-or-approved-and-about-to-be-merged-back-to-master"><a href="#A-pull-request-was-reviewed-or-approved-and-about-to-be-merged-back-to-master" class="headerlink" title="A pull request was reviewed or approved and about to be merged back to master."></a>A pull request was reviewed or approved and about to be merged back to master.</h2><ul><li>Best practise:<br>It’s a good timing to use <code>rebase</code> to clean up if you donn’t want to keep the review/feedback changes in the pull request.</li><li>Explanation:<br>Althought in this case the pull request is considered as a published one, since it will immediately be merged back and removed,<br>no one will fetch and care it soon, it’s safe to be <code>rebase</code>ed.</li></ul><h1 id="Golden-Rule-for-rebase"><a href="#Golden-Rule-for-rebase" class="headerlink" title="Golden Rule for rebase"></a>Golden Rule for rebase</h1><p>Remember <code>rebase</code> changes the history of branch, <strong>NEVER</strong> do it at the branch which may be fetched by other collabrators who plans to continue works upon it.</p><h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p><a href="http://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge" target="_blank" rel="noopener">http://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge</a><br><a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing/conceptual-overview" target="_blank" rel="noopener">https://www.atlassian.com/git/tutorials/merging-vs-rebasing/conceptual-overview</a><br><a href="https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase/" target="_blank" rel="noopener">https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;Nowadays lots of teams use git as the VCS, one of most power feature of git is branching, so it’s not uncommon that we need to frequently incorporate feasures into master or vise versa. As you know, there are two approches &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt;.&lt;br&gt;Then you may be wondering shall we use &lt;code&gt;git merge&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt;? The debates between these two is a bit controvertial and also there is holy-wars likes &lt;code&gt;vim vs emacs&lt;/code&gt; or &lt;code&gt;Tabs vs Spaces&lt;/code&gt; between them, here I have no interest to join the debate, which means I am not talking which one is better, but in a certain scenario whichone is more suitable.&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>farewell fujixerox</title>
    <link href="http://yoursite.com/2015/10/23/farewell-fx/"/>
    <id>http://yoursite.com/2015/10/23/farewell-fx/</id>
    <published>2015-10-23T15:33:06.000Z</published>
    <updated>2015-12-13T13:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>和之璧，井里之厥也。玉人琢之，为天子宝 –《荀子》</p><p>终于离开FX了，在SDCC呆了9个年头，真的不算短了。<br>  好多朋友问我，在500强公司，你从Engineer做到Leader再到Supervisor，一切不是挺好到吗? 是的，从职场的角度看，还算顺利，可是扪心自问,这真是自己想要的吗？<br><a id="more"></a><br>答案是否定的。</p><p>  和我一起进公司的同期们，但凡比较努力的也都陆陆续续做了Leader或Supervisor，大家自然而然地离开了coding，开始了各种报告，整报表，数据分析，和客户扯皮，找老板抢资源等等<em>管理</em>活动。当然，其中有些是有价值的工作，有些只是在这个庞大的组织机构的臃肿的流程中的转圈圈而已。可能我是少数的每天坚持弄代码弄技术的家伙吧，可是当效益和流程被各种放大，产品和创造力慢慢地被忽视，环顾四周：</p><p>  “嗨，我们不是专业的软件开发者吗，不敢奢求做出改变世界的东东，大家不想捣鼓些有价值的玩意儿吗？”</p><p>  没有声音，于是我发现，在这里再也找不到可以追赶的背影了。 </p><p>  Sigh…</p><p>  罢了，我只是个软件手艺人, 包工头真的不适合我(尽管为公司获得最大利润是他们非常职业的行为, 绝无轻视之意）, 所谓匠心，不就是把热情都倾注在作品上的一种态度吗？<br>  所以，为了专注于作品，我来到了<a href="https://wiredcraft.com/" target="_blank" rel="noopener">琢品</a>。期待中，并准备迎接挑战。</p><p>  在此也感谢<a href="https://github.com/dreamhead" target="_blank" rel="noopener">dreamhead</a>, 虽然只有一面之缘，让我见识了什么是真正的专业人士，也让我有了一个可望不可及的追赶的目标。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和之璧，井里之厥也。玉人琢之，为天子宝 –《荀子》&lt;/p&gt;
&lt;p&gt;终于离开FX了，在SDCC呆了9个年头，真的不算短了。&lt;br&gt;  好多朋友问我，在500强公司，你从Engineer做到Leader再到Supervisor，一切不是挺好到吗? 是的，从职场的角度看，还算顺利，可是扪心自问,这真是自己想要的吗？&lt;br&gt;
    
    </summary>
    
    
      <category term="thinking" scheme="http://yoursite.com/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>vim-snippets</title>
    <link href="http://yoursite.com/2015/09/14/vim-snippets/"/>
    <id>http://yoursite.com/2015/09/14/vim-snippets/</id>
    <published>2015-09-14T14:06:59.000Z</published>
    <updated>2016-03-09T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自我感觉作为一个程序员，还算得上一个比较有效率的人，最近拜读<em>程序人生</em>的技术专栏<a href="http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;mid=206041450&amp;idx=1&amp;sn=3982c8cc45d7c47f0fbc19fe8371490f&amp;scene=0#rd" target="_blank" rel="noopener">程序员效率指南</a>, 不由得自省了一把，其他还马马虎虎，作一个VIM用了2，3年的programmer，(虽然偶尔也用WebStrom和InteliJ, 毕竟vim是自己的主力editor)，尴尬了，尽管也有neocomplete等一干plugin助力，居然没有用过snippets….亡羊补牢吧。<br><a id="more"></a></p><h1 id="Snippets-Plugin-for-Vimer"><a href="#Snippets-Plugin-for-Vimer" class="headerlink" title="Snippets Plugin for Vimer"></a>Snippets Plugin for Vimer</h1><ol><li><a href="https://github.com/SirVer/ultisnips" target="_blank" rel="noopener">SirVer/ultisnips</a></li><li><a href="https://github.com/honza/vim-snippets" target="_blank" rel="noopener">honza/vim-snippets</a><br>ultisnips是snippets enginne，要配合honza/vim-snippets一起用。(画外音：“我知道，要两粒在一起吃才好”)</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>github上已经有的就不写了，如果你和我一样用的不是vundle, 而是pathogen的话，<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.vim/bundle</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/SirVer/ultisnips</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/honza/vim-snippets</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">" Trigger configuration. Do not use &lt;tab&gt; if you use https://github.com/Valloric/YouCompleteMe.</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsExpandTrigger</span>=<span class="string">"&lt;tab&gt;"</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsJumpForwardTrigger</span>=<span class="string">"&lt;c-j&gt;"</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsJumpBackwardTrigger</span>=<span class="string">"&lt;c-k&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" If you want :UltiSnipsEdit to split your window.</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsEditSplit</span>=<span class="string">"vertical"</span></span><br></pre></td></tr></table></figure><p><code>UltiSnipsExpandTrigger</code>较好理解，就是触发展开snippet的热键, <code>UltiSnipsJumpForwardTrigger</code>和<code>UltiSnipsJumpBackwardTrigger</code>是控制tabstop的热键，后面有详述。</p><h2 id="如何自定义"><a href="#如何自定义" class="headerlink" title="如何自定义"></a>如何自定义</h2><p>我自己写JavaScript会比较多，根据<a href="https://github.com/honza/vim-snippets/tree/master/snippets/javascript，" target="_blank" rel="noopener">https://github.com/honza/vim-snippets/tree/master/snippets/javascript，</a><br>除了通用的<a href="https://github.com/honza/vim-snippets/blob/master/snippets/javascript/javascript.snippets" target="_blank" rel="noopener">JavaScript Snippets</a>之外，还有jquery, d3, requirejs, node专有的snippets, 基本够用，当然总有一天你会想自己定制snippet…</p><h3 id="Snip-Search-Path"><a href="#Snip-Search-Path" class="headerlink" title="Snip Search Path"></a>Snip Search Path</h3><p>snippet目录必须是｀runtimepath`的子目录，可以在下面配置中自己修改。<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsSnippetDirectories</span>=[<span class="string">"UltiSnips"</span>]</span><br></pre></td></tr></table></figure></p><p>UltiSnips会根据以下策略去找snippet文件：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ft<span class="selector-class">.snippets</span>, ft_*<span class="selector-class">.snippets</span>, or ft<span class="comment">/*</span></span><br></pre></td></tr></table></figure></p><p>其中<code>ft</code>是当前文档的filetype。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>非常简单，<code>snippet</code>开始，<code>endsnippet</code>结束。定义格式：<code>snippet tab_trigger [ &quot;description&quot; [ options ] ]</code><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">snippet <span class="keyword">if</span> <span class="string">"if ... then (if)"</span></span><br><span class="line"><span class="keyword">if</span> $&#123;<span class="number">2</span><span class="symbol">:</span>[[ $&#123;<span class="number">1</span><span class="symbol">:condition</span>&#125; ]]&#125;; <span class="keyword">then</span></span><br><span class="line">        $&#123;<span class="number">0</span><span class="symbol">:</span><span class="comment">#statements&#125;</span></span><br><span class="line">fi</span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure></p><p>就是说你输入<code>if</code>的话，<code>if...fi</code>整个block会被插入。</p><h3 id="Visual-Placeholder"><a href="#Visual-Placeholder" class="headerlink" title="Visual Placeholder"></a>Visual Placeholder</h3><p>Snippets中特殊的placeholder: <code>${VISUAL}</code>， visual mode 中选中的内容会被替换进来。触发如下：<br>选中-&gt; <code>&lt;tab&gt;</code> -&gt; tag_trigger -&gt; <code>&lt;tab&gt;</code></p><h3 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h3><p>snippets中可以使用shellcode, vimscript, python等，用    `(backtick)包起来就行。</p><h3 id="Tabstop-和-Placeholder"><a href="#Tabstop-和-Placeholder" class="headerlink" title="Tabstop 和 Placeholder"></a>Tabstop 和 Placeholder</h3><p>这部分保证了固定结构的snippets中可以输入可变的部分，tabstop用来控制光标在几个变量间跳转。<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">snippet letter</span><br><span class="line">Dear <span class="symbol">$</span><span class="number">1</span>,</span><br><span class="line"><span class="meta"><span class="meta-keyword">$0</span></span></span><br><span class="line">Yours sincerely,</span><br><span class="line"><span class="meta"><span class="meta-keyword">$2</span></span></span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure></p><p>输入<code>letter</code>后按<code>&lt;tab&gt;</code>, snippet会被插入，然后<code>&lt;c-j&gt;</code>,<code>&lt;c-k&gt;</code>就可以在<code>$1</code> <code>$2</code>之间跳转，注意<code>$0</code>是最后一个位置，到了<code>$0</code>以后就不能再跳转了，往回跳也不行。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>请参考<a href="https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt" target="_blank" rel="noopener">https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;自我感觉作为一个程序员，还算得上一个比较有效率的人，最近拜读&lt;em&gt;程序人生&lt;/em&gt;的技术专栏&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=206041450&amp;amp;idx=1&amp;amp;sn=3982c8cc45d7c47f0fbc19fe8371490f&amp;amp;scene=0#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程序员效率指南&lt;/a&gt;, 不由得自省了一把，其他还马马虎虎，作一个VIM用了2，3年的programmer，(虽然偶尔也用WebStrom和InteliJ, 毕竟vim是自己的主力editor)，尴尬了，尽管也有neocomplete等一干plugin助力，居然没有用过snippets….亡羊补牢吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2015/09/14/hello-world/"/>
    <id>http://yoursite.com/2015/09/14/hello-world/</id>
    <published>2015-09-14T05:33:06.000Z</published>
    <updated>2016-03-22T15:10:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a>  </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
